<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>redis-conf</title>
      <link href="/2019/08/23/redis-conf/"/>
      <url>/2019/08/23/redis-conf/</url>
      <content type="html"><![CDATA[<div class="note primary"><p>在Redis的使用过程，除了知道对Redis五种数据类型的操作方法之外，最主要额就是对redis.conf进行配置了,下面整理出redis.conf中常见的一些配置介绍。</p></div><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br></pre></td><td class="code"><pre><span class="line">1: Redis默认不是以守护进程的方式运行，可以通过该配置项修改，使用yes启用守护进程</span><br><span class="line">    daemonize no</span><br><span class="line"></span><br><span class="line">2: 当Redis以守护进程方式运行时，Redis默认会把pid写入/var/run/redis.pid文件，可以通过pidfile指定</span><br><span class="line">    pidfile /var/run/redis.pid</span><br><span class="line"></span><br><span class="line">3: 指定Redis监听端口，默认端口为6379，作者在自己的一篇博文中解释了为什么选用6379作为默认端口，</span><br><span class="line">因为6379在手机按键上MERZ对应的号码，而MERZ取自意大利歌女Alessia Merz的名字</span><br><span class="line">  port 6379</span><br><span class="line"></span><br><span class="line">4: 绑定的主机地址</span><br><span class="line">  bind 127.0.0.1</span><br><span class="line"></span><br><span class="line">5: 当 客户端闲置多长时间后关闭连接，如果指定为0，表示关闭该功能</span><br><span class="line">  timeout 300</span><br><span class="line"></span><br><span class="line">6: 指定日志记录级别，Redis总共支持四个级别：debug、verbose、notice、warning，</span><br><span class="line">默认为verbose</span><br><span class="line">  loglevel verbose</span><br><span class="line"></span><br><span class="line">7: 日志记录方式，默认为标准输出，如果配置Redis为守护进程方式运行，而这里又配置为日志</span><br><span class="line">记录方式为标准输出，则日志将会发送给/dev/null</span><br><span class="line">  logfile stdout</span><br><span class="line"></span><br><span class="line">8: 设置数据库的数量，默认数据库为0，可以使用SELECT &lt;dbid&gt;命令在连接上指定数据库id</span><br><span class="line">  databases 16</span><br><span class="line"></span><br><span class="line">9: 指定在多长时间内，有多少次更新操作，就将数据同步到数据文件，可以多个条件配合</span><br><span class="line">  save &lt;seconds&gt; &lt;changes&gt;</span><br><span class="line">  Redis默认配置文件中提供了三个条件：</span><br><span class="line">  save 900 1</span><br><span class="line">  save 300 10</span><br><span class="line">  save 60 10000</span><br><span class="line">  分别表示900秒（15分钟）内有1个更改，300秒（5分钟）内有10个更改以及60秒内有10000个更改。</span><br><span class="line"></span><br><span class="line">10: 指定存储至本地数据库时是否压缩数据，默认为yes，Redis采用LZF压缩，如果为了节省CPU时间，</span><br><span class="line">可以关闭该选项，但会导致数据库文件变的巨大</span><br><span class="line">  rdbcompression yes</span><br><span class="line"></span><br><span class="line">11: 指定本地数据库文件名，默认值为dump.rdb</span><br><span class="line">  dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line">12: 指定本地数据库存放目录</span><br><span class="line">  dir ./</span><br><span class="line"></span><br><span class="line">13: 设置当本机为slav服务时，设置master服务的IP地址及端口，在Redis启动时，它会自动从master进行数据同步</span><br><span class="line">  slaveof &lt;masterip&gt; &lt;masterport&gt;</span><br><span class="line"></span><br><span class="line">14: 当master服务设置了密码保护时，slav服务连接master的密码</span><br><span class="line">  masterauth &lt;master-password&gt;</span><br><span class="line"></span><br><span class="line">15: 设置Redis连接密码，如果配置了连接密码，客户端在连接Redis时需要通过AUTH &lt;password&gt;命令提供密码，默认关闭</span><br><span class="line">  requirepass foobared</span><br><span class="line"></span><br><span class="line">16: 设置同一时间最大客户端连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件描述符数，</span><br><span class="line">如果设置 maxclients 0，表示不作限制。当客户端连接数到达限制时，Redis会关闭新的连接并向客户端</span><br><span class="line">返回max number of clients reached错误信息</span><br><span class="line">  maxclients 128</span><br><span class="line"></span><br><span class="line">17: 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key，</span><br><span class="line">当此方法处理 后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。Redis新的vm机制，会把Key存放内存，</span><br><span class="line">Value会存放在swap区</span><br><span class="line">  maxmemory &lt;bytes&gt;</span><br><span class="line"></span><br><span class="line">18: 指定是否在每次更新操作后进行日志记录，Redis在默认情况下是异步的把数据写入磁盘，如果不开启，可能会在断电时导致一段时间内的数据丢失。</span><br><span class="line">因为 redis本身同步数据文件是按上面save条件来同步的，所以有的数据会在一段时间内只存在于内存中。默认为no</span><br><span class="line">  appendonly no</span><br><span class="line"></span><br><span class="line">19: 指定更新日志文件名，默认为appendonly.aof</span><br><span class="line">   appendfilename appendonly.aof</span><br><span class="line"></span><br><span class="line">20: 指定更新日志条件，共有3个可选值：</span><br><span class="line">  no：表示等操作系统进行数据缓存同步到磁盘（快）</span><br><span class="line">  always：表示每次更新操作后手动调用fsync()将数据写到磁盘（慢，安全）</span><br><span class="line">  everysec：表示每秒同步一次（折衷，默认值）</span><br><span class="line">  appendfsync everysec</span><br><span class="line"></span><br><span class="line">21: 指定是否启用虚拟内存机制，默认值为no，简单的介绍一下，VM机制将数据分页存放，由Redis将访问量较少的页即冷数据swap到磁盘上，</span><br><span class="line">访问多的页面由磁盘自动换出到内存中（在后面的文章我会仔细分析Redis的VM机制）</span><br><span class="line">   vm-enabled no</span><br><span class="line"></span><br><span class="line">22: 虚拟内存文件路径，默认值为/tmp/redis.swap，不可多个Redis实例共享</span><br><span class="line">   vm-swap-file /tmp/redis.swap</span><br><span class="line"></span><br><span class="line">23: 将所有大于vm-max-memory的数据存入虚拟内存,无论vm-max-memory设置多小,所有索引数据都是内存存储的(Redis的索引数据 就是keys),</span><br><span class="line">也就是说,当vm-max-memory设置为0的时候,其实是所有value都存在于磁盘。默认值为0</span><br><span class="line">   vm-max-memory 0</span><br><span class="line"></span><br><span class="line">24: Redis swap文件分成了很多的page，一个对象可以保存在多个page上面，但一个page上不能被多个对象共享，</span><br><span class="line">vm-page-size是要根据存储的 数据大小来设定的，作者建议如果存储很多小对象，page大小最好设置为32或者64bytes；</span><br><span class="line">如果存储很大大对象，则可以使用更大的page，如果不 确定，就使用默认值</span><br><span class="line">   vm-page-size 32</span><br><span class="line"></span><br><span class="line">25: 设置swap文件中的page数量，由于页表（一种表示页面空闲或使用的bitmap）是在放在内存中的，，在磁盘上每8个pages将消耗1byte的内存。</span><br><span class="line">   vm-pages 134217728</span><br><span class="line"></span><br><span class="line">26: 设置访问swap文件的线程数,最好不要超过机器的核数,如果设置为0,那么所有对swap文件的操作都是串行的，</span><br><span class="line">可能会造成比较长时间的延迟。默认值为4</span><br><span class="line">   vm-max-threads 4</span><br><span class="line"></span><br><span class="line">27: 设置在向客户端应答时，是否把较小的包合并为一个包发送，默认为开启</span><br><span class="line">  glueoutputbuf yes</span><br><span class="line"></span><br><span class="line">28: 指定在超过一定的数量或者最大的元素超过某一临界值时，采用一种特殊的哈希算法</span><br><span class="line">  hash-max-zipmap-entries 64</span><br><span class="line">  hash-max-zipmap-value 512</span><br><span class="line"></span><br><span class="line">29: 指定是否激活重置哈希，默认为开启（后面在介绍Redis的哈希算法时具体介绍）</span><br><span class="line">  activerehashing yes</span><br><span class="line"></span><br><span class="line">30: 指定包含其它的配置文件，可以在同一主机上多个Redis实例之间使用同一份配置文件，而同时各个实例又拥有自己的特定配置文件</span><br><span class="line">  include /path/to/local.conf</span><br><span class="line"><span class="meta">  #</span><span class="bash">daemonize no  默认情况下， redis 不是在后台运行的，如果需要在后台运行，把该项的值更改为 yes</span></span><br><span class="line"></span><br><span class="line">daemonize yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当 redis 在后台运行的时候， Redis 默认会把 pid 文件放在 /var/run/redis.pid ，你可以配置到其他地址。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当运行多个 redis 服务时，需要指定不同的 pid 文件和端口</span></span><br><span class="line"></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  指定 redis 运行的端口，默认是 6379</span></span><br><span class="line"></span><br><span class="line">port 6379</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  在高并发的环境中，为避免慢客户端的连接问题，需要设置一个高速后台日志</span></span><br><span class="line"></span><br><span class="line">tcp-backlog 511</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  指定 redis 只接收来自于该 IP 地址的请求，如果不进行设置，那么将处理所有请求</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 192.168.1.100 10.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">bind</span> 127.0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0 是关闭此设置</span></span><br><span class="line"></span><br><span class="line">timeout 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP keepalive</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  在 Linux 上，指定值（秒）用于发送 ACKs 的时间。注意关闭连接需要双倍的时间。默认为 0 。</span></span><br><span class="line"></span><br><span class="line">tcp-keepalive 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  指定日志记录级别，生产环境推荐 notice</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis 总共支持四个级别： debug 、 verbose 、 notice 、 warning ，默认为 verbose</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> debug     记录很多信息，用于开发和测试</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> varbose   有用的信息，不像 debug 会记录那么多</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> notice    普通的 verbose ，常用于生产环境</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> warning   只有非常重要或者严重的信息会记录到日志</span></span><br><span class="line"></span><br><span class="line">loglevel notice</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  配置 <span class="built_in">log</span> 文件地址</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认值为 stdout ，标准输出，若后台模式会输出到 /dev/null 。</span></span><br><span class="line"></span><br><span class="line">logfile /var/log/redis/redis.log</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  可用数据库数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认值为 16 ，默认数据库为 0 ，数据库范围在 0- （ database-1 ）之间</span></span><br><span class="line"></span><br><span class="line">databases 16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### 快照#################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  保存数据到磁盘，格式如下 :</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">   save</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">    指出在多长时间内，有多少次更新操作，就将数据同步到数据文件 rdb 。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">    相当于条件触发抓取快照，这个可以多个条件配合</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">    比如默认配置文件中的设置，就设置了三个条件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">   save 900 1  900 秒内至少有 1 个 key 被改变</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">   save 300 10  300 秒内至少有 300 个 key 被改变</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">   save 60 10000  60 秒内至少有 10000 个 key 被改变</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> save 900 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> save 300 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> save 60 10000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  后台存储错误停止写。</span></span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  存储至本地数据库时（持久化到 rdb 文件）是否压缩数据，默认为 yes</span></span><br><span class="line"></span><br><span class="line">rdbcompression yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 对rdb数据进行校验,耗费CPU资源,默认为yes</span></span><br><span class="line"></span><br><span class="line">rdbchecksum yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  本地持久化数据库文件名，默认值为 dump.rdb</span></span><br><span class="line"></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  工作目录</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  数据库镜像备份的文件放置的路径。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  这里的路径跟文件名要分开配置是因为 redis 在进行备份时，先会将当前数据库的状态写入到一个临时文件中，等备份完成，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  再把该该临时文件替换为上面所指定的文件，而这里的临时文件和上面所配置的备份文件都会放在这个指定的路径当中。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF 文件也会存放在这个目录下面</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  注意这里必须制定一个目录而不是文件</span></span><br><span class="line"></span><br><span class="line">dir /var/lib/redis-server/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################ 复制 #################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  主从复制 . 设置该数据库为其他数据库的从数据库 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  设置当本机为 slav 服务时，设置 master 服务的 IP 地址及端口，在 Redis 启动时，它会自动从 master 进行数据同步</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slaveof</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当 master 服务设置了密码保护时 ( 用 requirepass 制定的密码 )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave 服务连接 master 的密码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> masterauth</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当从库同主机失去连接或者复制正在进行，从机库有两种运行方式：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 1)  如果 slave-serve-stale-data 设置为 yes( 默认设置 ) ，从库会继续响应客户端的请求</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2)  如果 slave-serve-stale-data 是指为 no ，出去 INFO 和 SLAVOF 命令之外的任何请求都会返回一个</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">     错误 <span class="string">"SYNC with master in progress"</span></span></span><br><span class="line"></span><br><span class="line">slave-serve-stale-data yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  配置 slave 实例是否接受写。写 slave 对存储短暂数据（在同 master 数据同步后可以很容易地被删除）是有用的，但未配置的情况下，客户端写可能会发送问题。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  从 Redis2.6 后，默认 slave 为 <span class="built_in">read</span>-only</span></span><br><span class="line"></span><br><span class="line">slaveread-only yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  从库会按照一个时间间隔向主库发送 PINGs. 可以通过 repl-ping-slave-period 设置这个时间间隔，默认是 10 秒</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-ping-slave-period 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout  设置主库批量数据传输时间或者 ping 回复时间间隔，默认值是 60 秒</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  一定要确保 repl-timeout 大于 repl-ping-slave-period</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-timeout 60</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  在 slave socket 的 SYNC 后禁用 TCP_NODELAY</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果选择“ yes ” ,Redis 将使用一个较小的数字 TCP 数据包和更少的带宽将数据发送到 slave ， 但是这可能导致数据发送到 slave 端会有延迟 , 如果是 Linux kernel 的默认配置，会达到 40 毫秒 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果选择 <span class="string">"no"</span> ，则发送数据到 slave 端的延迟会降低，但将使用更多的带宽用于复制 .</span></span><br><span class="line"></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  设置复制的后台日志大小。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  复制的后台日志越大， slave 断开连接及后来可能执行部分复制花的时间就越长。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  后台日志在至少有一个 slave 连接时，仅仅分配一次。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-size 1mb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  在 master 不再连接 slave 后，后台日志将被释放。下面的配置定义从最后一个 slave 断开连接后需要释放的时间（秒）。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 0 意味着从不释放后台日志</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> repl-backlog-ttl 3600</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果 master 不能再正常工作，那么会在多个 slave 中，选择优先值最小的一个 slave 提升为 master ，优先值为 0 表示不能提升为 master 。</span></span><br><span class="line"></span><br><span class="line">slave-priority 100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果少于 N 个 slave 连接，且延迟时间 &lt;=M 秒，则 master 可配置停止接受写操作。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  例如需要至少 3 个 slave 连接，且延迟 &lt;=10 秒的配置：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-to-write 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> min-slaves-max-lag 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  设置 0 为禁用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">   默认 min-slaves-to-write 为 0 （禁用）， min-slaves-max-lag 为 10</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################# 安全 ###################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  设置客户端连接后进行任何其他指定前需要使用的密码。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  警告：因为 redis 速度相当快，所以在一台比较好的服务器下，一个外部的用户可以在一秒钟进行 150K 次的密码尝试，这意味着你需要指定非常非常强大的密码来防止暴力破解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> requirepass foobared</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  命令重命名 .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  在一个共享环境下可以重命名相对危险的命令。比如把 CONFIG 重名为一个不容易猜测的字符。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  举例 :</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果想删除一个命令，直接把它重命名为一个空字符 <span class="string">""</span> 即可，如下：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> rename-command CONFIG <span class="string">""</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">################################## 约束###################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置同一时间最大客户端连接数，默认无限制，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Redis 可以同时打开的客户端连接数为 Redis 进程可以打开的最大文件描述符数，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">如果设置  maxclients 0 ，表示不作限制。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当客户端连接数到达限制时， Redis 会关闭新的连接并向客户端返回 max number of clients reached 错误信息</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxclients 10000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  指定 Redis 最大内存限制， Redis 在启动时会把数据加载到内存中，达到最大内存后， Redis 会按照清除策略尝试清除已到期的 Key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果 Redis 依照策略清除后无法提供足够空间，或者策略设置为 ”noeviction” ，则使用更多空间的命令将会报错，例如 SET, LPUSH 等。但仍然可以进行读取操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  注意： Redis 新的 vm 机制，会把 Key 存放内存， Value 会存放在 swap 区</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  该选项对 LRU 策略很有用。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory 的设置比较适合于把 redis 当作于类似 memcached 的缓存来使用，而不适合当做一个真实的 DB 。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当把 Redis 当做一个真实的数据库使用的时候，内存使用将是一个很大的开销</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当内存达到最大值的时候 Redis 会选择删除哪些数据？有五种方式可供选择</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-lru -&gt;  利用 LRU 算法移除设置过过期时间的 key (LRU: 最近使用  Least RecentlyUsed )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> allkeys-lru -&gt;  利用 LRU 算法移除任何 key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-random -&gt;  移除设置过过期时间的随机 key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> allkeys-&gt;random -&gt; remove a randomkey, any key</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> volatile-ttl -&gt;  移除即将过期的 key(minor TTL)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> noeviction -&gt;  不移除任何可以，只是返回一个写错误</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  注意：对于上面的策略，如果没有合适的 key 可以移除，当写的时候 Redis 会返回一个错误</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认是 :  volatile-lru</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-policy volatile-lru</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> LRU  和  minimal TTL 算法都不是精准的算法，但是相对精确的算法 ( 为了节省内存 ) ，随意你可以选择样本大小进行检测。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis 默认的灰选择 3 个样本进行检测，你可以通过 maxmemory-samples 进行设置</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> maxmemory-samples 3</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################# AOF###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认情况下， redis 会在后台异步的把数据库镜像备份到磁盘，但是该备份是非常耗时的，而且备份也不能很频繁，如果发生诸如拉闸限电、拔插头等状况，那么将造成比较大范围的数据丢失。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  所以 redis 提供了另外一种更加高效的数据库备份及灾难恢复方式。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  开启 append only 模式之后， redis 会把所接收到的每一次写操作请求都追加到 appendonly.aof 文件中，当 redis 重新启动时，会从该文件恢复出之前的状态。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  但是这样会造成 appendonly.aof 文件过大，所以 redis 还支持了 BGREWRITEAOF 指令，对 appendonly.aof 进行重新整理。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  你可以同时开启 asynchronous dumps 和  AOF</span></span><br><span class="line"></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF 文件名称  ( 默认 : <span class="string">"appendonly.aof"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfilename appendonly.aof</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis 支持三种同步 AOF 文件的策略 :</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> no:  不进行同步，系统去操作  . Faster.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> always: always 表示每次有写操作都进行同步 . Slow, Safest.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> everysec:  表示对写操作进行累积，每秒同步一次 . Compromise.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认是 <span class="string">"everysec"</span> ，按照速度和安全折中这是最好的。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果想让 Redis 能更高效的运行，你也可以设置为 <span class="string">"no"</span> ，让操作系统决定什么时候去执行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  或者相反想让数据更安全你也可以设置为 <span class="string">"always"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果不确定就用  <span class="string">"everysec"</span>.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfsync always</span></span><br><span class="line"></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> appendfsync no</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF 策略设置为 always 或者 everysec 时，后台处理进程 ( 后台保存或者 AOF 日志重写 ) 会执行大量的 I/O 操作</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  在某些 Linux 配置中会阻止过长的 fsync() 请求。注意现在没有任何修复，即使 fsync 在另外一个线程进行处理</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  为了减缓这个问题，可以设置下面这个参数 no-appendfsync-on-rewrite</span></span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> AOF  自动重写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当 AOF 文件增长到一定大小的时候 Redis 能够调用  BGREWRITEAOF  对日志文件进行重写</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  它是这样工作的： Redis 会记住上次进行些日志后文件的大小 ( 如果从开机以来还没进行过重写，那日子大小在开机的时候确定 )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  基础大小会同现在的大小进行比较。如果现在的大小比基础大小大制定的百分比，重写功能将启动</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  同时需要指定一个最小大小用于 AOF 重写，这个用于阻止即使文件很小但是增长幅度很大也去重写 AOF 文件的情况</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  设置  percentage 为 0 就关闭这个特性</span></span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">############################### LUASCRIPTING #############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 一个 Lua 脚本最长的执行时间为 5000 毫秒（ 5 秒），如果为 0 或负数表示无限执行时间。</span></span><br><span class="line"></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################LOW LOG################################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis Slow Log  记录超过特定执行时间的命令。执行时间不包括 I/O 计算比如连接客户端，返回结果等，只是命令执行时间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  可以通过两个参数设置 slow <span class="built_in">log</span> ：一个是告诉 Redis 执行超过多少时间被记录的参数 slowlog-log-slower-than( 微妙 ) ，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  另一个是 slow <span class="built_in">log</span> 的长度。当一个新命令被记录的时候最早的命令将被从队列中移除</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  下面的时间以微妙为单位，因此 1000000 代表一秒。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  注意指定一个负数将关闭慢日志，而设置为 0 将强制每个命令都会记录</span></span><br><span class="line"></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  对日志长度没有限制，只是要注意它会消耗内存</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  可以通过  SLOWLOG RESET 回收被慢日志消耗的内存</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  推荐使用默认值 128 ，当慢日志超过 128 时，最先进入队列的记录会被踢出</span></span><br><span class="line"></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">###############################  事件通知  #############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当事件发生时， Redis 可以通知 Pub/Sub 客户端。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  可以在下表中选择 Redis 要通知的事件类型。事件类型由单个字符来标识：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> K     Keyspace 事件，以 _keyspace@_ 的前缀方式发布</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> E     Keyevent 事件，以 _keysevent@_ 的前缀方式发布</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> g     通用事件（不指定类型），像 DEL, EXPIRE, RENAME, …</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> $     String 命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> s     Set 命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> h     Hash 命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> z     有序集合命令</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> x     过期事件（每次 key 过期时生成）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> e     清除事件（当 key 在内存被清除时生成）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> A     g<span class="variable">$lshzxe</span> 的别称，因此 ”AKE” 意味着所有的事件</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> notify-keyspace-events 带一个由 0 到多个字符组成的字符串参数。空字符串意思是通知被禁用。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  例子：启用 list 和通用事件：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> notify-keyspace-events Elg</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认所用的通知被禁用，因为用户通常不需要改特性，并且该特性会有性能损耗。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  注意如果你不指定至少 K 或 E 之一，不会发送任何事件。</span></span><br><span class="line"></span><br><span class="line">notify-keyspace-events “”</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#############################  高级配置  ###############################</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当 <span class="built_in">hash</span> 中包含超过指定元素个数并且最大的元素没有超过临界时，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">hash</span> 将以一种特殊的编码方式（大大减少内存使用）来存储，这里可以设置这两个临界值</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis Hash 对应 Value 内部实际就是一个 HashMap ，实际这里会有 2 种不同实现，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  这个 Hash 的成员比较少时 Redis 为了节省内存会采用类似一维数组的方式来紧凑存储，而不会采用真正的 HashMap 结构，对应的 valueredisObject 的 encoding 为 zipmap,</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当成员数量增大时会自动转成真正的 HashMap, 此时 encoding 为 ht 。</span></span><br><span class="line"></span><br><span class="line">hash-max-zipmap-entries 512</span><br><span class="line"></span><br><span class="line">hash-max-zipmap-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  和 Hash 一样，多个小的 list 以特定的方式编码来节省空间。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> list 数据类型节点值大小小于多少字节会采用紧凑存储格式。</span></span><br><span class="line"></span><br><span class="line">list-max-ziplist-entries 512</span><br><span class="line"></span><br><span class="line">list-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> 数据类型内部数据如果全部是数值型，且包含多少节点以下会采用紧凑格式存储。</span></span><br><span class="line"></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  和 hashe 和 list 一样 , 排序的 <span class="built_in">set</span> 在指定的长度内以指定编码方式存储以节省空间</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> zsort 数据类型节点值大小小于多少字节会采用紧凑存储格式。</span></span><br><span class="line"></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line"></span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis 将在每 100 毫秒时使用 1 毫秒的 CPU 时间来对 redis 的 <span class="built_in">hash</span> 表进行重新 <span class="built_in">hash</span> ，可以降低内存的使用</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当你的使用场景中，有非常严格的实时性需要，不能够接受 Redis 时不时的对请求有 2 毫秒的延迟的话，把这项配置为 no 。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果没有这么严格的实时性要求，可以设置为 yes ，以便能够尽可能快的释放内存</span></span><br><span class="line"></span><br><span class="line">activerehashing yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端的输出缓冲区的限制，因为某种原因客户端从服务器读取数据的速度不够快，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 可用于强制断开连接（一个常见的原因是一个发布 / 订阅客户端消费消息的速度无法赶上生产它们的速度）。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  可以三种不同客户端的方式进行设置：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> normal -&gt;  正常客户端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> slave  -&gt; slave 和 MONITOR 客户端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> pubsub -&gt;  至少订阅了一个 pubsub channel 或 pattern 的客户端</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  每个 client-output-buffer-limit 语法 :</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> client-output-buffer-limit</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  一旦达到硬限制客户端会立即断开，或者达到软限制并保持达成的指定秒数（连续）。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  例如，如果硬限制为 32 兆字节和软限制为 16 兆字节 /10 秒，客户端将会立即断开</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  如果输出缓冲区的大小达到 32 兆字节，客户端达到 16 兆字节和连续超过了限制 10 秒，也将断开连接。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认 normal 客户端不做限制，因为他们在一个请求后未要求时（以推的方式）不接收数据，</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  只有异步客户端可能会出现请求数据的速度比它可以读取的速度快的场景。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  把硬限制和软限制都设置为 0 来禁用该特性</span></span><br><span class="line"></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line"></span><br><span class="line">client-output-buffer-limit slave 256mb 64mb60</span><br><span class="line"></span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb60</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Redis 调用内部函数来执行许多后台任务，如关闭客户端超时的连接，清除过期的 Key ，等等。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  不是所有的任务都以相同的频率执行，但 Redis 依照指定的“ Hz ”值来执行检查任务。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  默认情况下，“ Hz ”的被设定为 10 。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  提高该值将在 Redis 空闲时使用更多的 CPU 时，但同时当有多个 key 同时到期会使 Redis 的反应更灵敏，以及超时可以更精确地处理。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  范围是 1 到 500 之间，但是值超过 100 通常不是一个好主意。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  大多数用户应该使用 10 这个预设值，只有在非常低的延迟的情况下有必要提高最大到 100 。</span></span><br><span class="line"></span><br><span class="line">hz 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">  当一个子节点重写 AOF 文件时，如果启用下面的选项，则文件每生成 32M 数据进行同步。</span></span><br><span class="line"></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>shell常用命令</title>
      <link href="/2019/08/23/shell-cmd/"/>
      <url>/2019/08/23/shell-cmd/</url>
      <content type="html"><![CDATA[<div class="note primary"><p>记录平时使用频繁的系统命令，例如快速删除日志，修改主机名，修改静态网络</p></div><a id="more"></a><h3 id="修改目录权限，让view用户可以访问其他用户的内容，没有写的权限。"><a href="#修改目录权限，让view用户可以访问其他用户的内容，没有写的权限。" class="headerlink" title="修改目录权限，让view用户可以访问其他用户的内容，没有写的权限。"></a>修改目录权限，让view用户可以访问其他用户的内容，没有写的权限。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod o+r /app</span><br></pre></td></tr></table></figure><h3 id="centos永久关闭防火墙"><a href="#centos永久关闭防火墙" class="headerlink" title="centos永久关闭防火墙"></a>centos永久关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 关闭iptables</span></span><br><span class="line">/etc/init.d/iptables stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久关闭</span></span><br><span class="line">chkconfig iptables off</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检查</span></span><br><span class="line">chkconfig --list iptables</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭selinux</span></span><br><span class="line">setenforce 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 永久关闭selinux</span></span><br><span class="line">sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="根据文档内容分组计数"><a href="#根据文档内容分组计数" class="headerlink" title="根据文档内容分组计数"></a>根据文档内容分组计数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat lsof.txt |awk '&#123;++PID[$2]&#125; END &#123;for(key in PID) print key,'\t',PID[key]&#125;'|sort -nk 2</span><br></pre></td></tr></table></figure><p>查看进程时间<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo comm,lstart|grep server |sort -u |awk -F ":" '&#123;printf("%s,%s\n",$1,$2)&#125;|sort -u</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React配置label报错，package.json和.babelrc出现冲突</title>
      <link href="/2019/08/20/labelerr/"/>
      <url>/2019/08/20/labelerr/</url>
      <content type="html"><![CDATA[<div class="note warning"><p>Error: Multiple configuration files found. Please remove one: – package.json#babel – .babelrc</p></div><a id="more"></a>    <h4 id="react报错如下："><a href="#react报错如下：" class="headerlink" title="react报错如下："></a>react报错如下：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Error: Multiple configuration files found. Please remove one:</span><br><span class="line"> - package.json#babel</span><br><span class="line"> - .babelrc</span><br></pre></td></tr></table></figure><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">如果出现以上错误，就是 babel 的配置出现了重复，检查一下根目录的.babelrc和package.json中的babel配置出现了两份，删除一份即可。</span><br><span class="line">查看package.json，是否存在代码，如果有删除</span><br><span class="line">   <span class="string">"babel"</span>: &#123;</span><br><span class="line">     <span class="string">"presets"</span>: [</span><br><span class="line">       <span class="string">"react-app"</span></span><br><span class="line">     ]</span><br><span class="line">  &#125;,</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"> /Users/zhaodong/python/oms_web/file/hosts/versions/<span class="number">20190821</span><span class="comment">/*.war</span></span><br><span class="line"><span class="comment"> /Users/zhaodong/python/oms_web/file/versions/20190821</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>postgresql 表空间创建、删除</title>
      <link href="/2018/05/31/pg-tablespace/"/>
      <url>/2018/05/31/pg-tablespace/</url>
      <content type="html"><![CDATA[<div class="note info"><p>表空间：字面上理解就是表存储的物理空间，其实包括数据库的表、索引、序列等。</p><p>可以将表空间创建在服务器的不同分区，这样做的好处有：</p><p>一、如果初始化集群所在分区已经用光，可以方便的其他分区上创建表空间已达到扩容的目的。</p><p>二、对于频繁访问的数据可以存储在性能较高、较快的磁盘分区上，而不常用的数据存储在便宜的较慢的磁盘分区上。</p></div><a id="more"></a><h1 id="创建表空间"><a href="#创建表空间" class="headerlink" title="创建表空间"></a>创建表空间</h1><p>语法：</p><p>postgres=# \h create tablespace<br>Command:     CREATE TABLESPACE<br>Description: define a new tablespace<br>Syntax:<br>CREATE TABLESPACE tablespace_name</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ OWNER user_name ]</span><br><span class="line">LOCATION &apos;directory&apos;</span><br><span class="line">[ WITH ( tablespace_option = value [, ... ] ) ]</span><br></pre></td></tr></table></figure><p>用户必须有表空间所在目录访问权限，所以在创建表空间之前需要在对应分区下创建相应的目录，并为其分配权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mkdir /usr/local/pgdata</span><br><span class="line">[root@localhost ~]# chown postgres:postgres /usr/local/pgdata/</span><br></pre></td></tr></table></figure><p> 创建表空间示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create tablespace tbs_test owner postgres location '/usr/local/pgdata';</span><br><span class="line">CREATE TABLESPACE</span><br></pre></td></tr></table></figure><p>创建表空间成功后，可在数据库集群目录下看到一个新增的目录pg_tblspc下有一个连接文件51276,指向到/usr/local/pgdata下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /mnt/syncdata/pgsql941/data/pg_tblspc/</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx. 1 postgres postgres 17 Aug 30 02:06 51276 -&gt; /usr/local/pgdata</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /usr/local/pgdata/</span><br><span class="line">total 4</span><br><span class="line">drwx------. 2 postgres postgres 4096 Aug 30 02:06 PG_9.4_201409291</span><br></pre></td></tr></table></figure><p>在此表空间内创建表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# create table test(a int) tablespace tbs_test;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span></span><br></pre></td></tr></table></figure><p>现在在表空间目录下就会新增一个test表对应的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# ll /usr/local/pgdata/PG_9.4_201409291/13003/51277 </span><br><span class="line">-rw-------. 1 postgres postgres 0 Aug 30 02:15 /usr/local/pgdata/PG_9.4_201409291/13003/51277</span><br></pre></td></tr></table></figure><p>其中51277对应的是test表的relfilenode，13003是数据库postgres的oid。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">postgres=# select oid,datname from pg_database where datname = 'postgres';</span><br><span class="line">  oid  | datname  </span><br><span class="line"><span class="comment">-------+----------</span></span><br><span class="line"> 13003 | postgres</span><br><span class="line">(1 row)</span><br><span class="line"></span><br><span class="line">postgres=# select relname,relfilenode from pg_class where relname='test';</span><br><span class="line"> relname | relfilenode </span><br><span class="line"><span class="comment">---------+-------------</span></span><br><span class="line"> test    |       51277</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h1 id="删除表空"><a href="#删除表空" class="headerlink" title="删除表空"></a>删除表空</h1><p>postgres=# \h drop tablespace<br>Command:     DROP TABLESPACE<br>Description: remove a tablespace<br>Syntax:<br>DROP TABLESPACE [ IF EXISTS ] name</p><p>删除表空间前必须要删除该表空间下的所有数据库对象，否则无法删除。</p><p>如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">postgres=# drop tablespace if exists tbs_test;</span><br><span class="line">ERROR:  tablespace "tbs_test" is not empty</span><br></pre></td></tr></table></figure><p>删除刚才在此表空间创建的表test，然后再删除表空间。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">postgres=# drop table if exists test;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line">postgres=# <span class="keyword">drop</span> <span class="keyword">tablespace</span> <span class="keyword">if</span> <span class="keyword">exists</span> tbs_test;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLESPACE</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> postgres </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>corosync+ pacemaker实现pg流复制自动切换</title>
      <link href="/2018/05/31/corosync-pg/"/>
      <url>/2018/05/31/corosync-pg/</url>
      <content type="html"><![CDATA[<div class="note danger"><p>说明：</p><p>该文档用于说明以corosync+pacemaker的方式实现PostgreSQL流复制自动切换。注意内容包括有关corosync/pacemaker知识总结以及整个环境的搭建过程和问题处理。</p></div><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Corosync</p><p>Corosync是由OpenAIS项目分离独立出来的项目，分离后能实现HA信息传输功能的就成为了Corosync，因此Corosync 60%的代码来源于OpenAIS。</p><p>Corosync与分离出来的Heartbeat类似，都属于集群信息层，负责传送集群信息以及节点间的心跳信息，单纯HA软件都不存在管理资源的功能，而是需要依赖上层的CRM来管理资源。目前最著名的资源管理器为Pacemaker，Corosync+Pacemaker也成为高可用集群方案中的最佳组合。</p><p>Pacemaker</p><p>Pacemaker，即Cluster Resource Manager（CRM），管理整个HA，客户端通过pacemaker管理监控整个集群。</p><p>常用的集群管理工具：</p><p>（1）基于命令行</p><p>crm shell/pcs</p><p>（2）基于图形化</p><p>pygui/hawk/lcmc/pcs</p><p>Pacemaker内部组件、模块关系图：</p><p><a href="http://image.codeweblog.com/upload/7/5c/75c7d2ac33b21262.png" target="_blank" rel="noopener"><img src="http://image.codeweblog.com/upload/7/5c/75c7d2ac33b21262_thumb.png" alt="corosync+ pacemaker实现pg流复制自动切换"></a></p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="2-1-OS"><a href="#2-1-OS" class="headerlink" title="2.1 OS"></a>2.1 OS</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/issue</span><br><span class="line">CentOS release 6.4 (Final)</span><br><span class="line">Kernel \r on an \m</span><br><span class="line"></span><br><span class="line"># uname -a</span><br><span class="line">Linux node1 2.6.32-358.el6.x86_64 #1 SMP Fri Feb 22 00:31:26 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><h2 id="2-2-IP"><a href="#2-2-IP" class="headerlink" title="2.2 IP"></a>2.2 IP</h2><p>node1:</p><p>eth0 192.168.100.201/24 GW 192.168.100.1 —真实地址</p><p>eth1 10.10.10.1/24 —心跳地址</p><p>eth2 192.168.1.1/24 —流复制地址</p><p>node2:</p><p>eth0 192.168.100.202/24 GW 192.168.100.1 —真实地址</p><p>eth1 10.10.10.2/24 —心跳地址</p><p>eth2 192.168.1.2/24 —流复制地址</p><p>虚拟地址：</p><p>eth0:0 192.168.100.213/24 —vip-master</p><p>eth0:0 192.168.100.214/24 —vip-slave</p><p>eth2:0 192.168.1.3/24 —vip-rep</p><h2 id="2-3-软件版本"><a href="#2-3-软件版本" class="headerlink" title="2.3 软件版本"></a>2.3 软件版本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># rpm -qa | grep corosync</span><br><span class="line">corosync-1.4.5-2.3.x86_64</span><br><span class="line">corosynclib-1.4.5-2.3.x86_64</span><br><span class="line"></span><br><span class="line"># rpm -qa | grep pacemaker</span><br><span class="line">pacemaker-libs-1.1.10-14.el6_5.2.x86_64</span><br><span class="line">pacemaker-cli-1.1.10-14.el6_5.2.x86_64</span><br><span class="line">pacemaker-1.1.10-14.el6_5.2.x86_64</span><br><span class="line">pacemaker-cluster-libs-1.1.10-14.el6_5.2.x86_64</span><br><span class="line"></span><br><span class="line"># rpm -qa | grep crmsh</span><br><span class="line">crmsh-1.2.6-6.1.x86_64</span><br></pre></td></tr></table></figure><p>PostgreSQL Version：9.1.4</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="3-1-设置YUM源"><a href="#3-1-设置YUM源" class="headerlink" title="3.1 设置YUM源"></a>3.1 设置YUM源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/yum.repos.d/ha-clustering.repo</span><br><span class="line">[haclustering]</span><br><span class="line">name=HA Clustering</span><br><span class="line">baseurl=http://download.opensuse.org/repositories/network:/ha-clustering:/Stable/CentOS_CentOS-6/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><h2 id="3-2-安装pacemaker-corosync-crmsh"><a href="#3-2-安装pacemaker-corosync-crmsh" class="headerlink" title="3.2 安装pacemaker/corosync/crmsh"></a>3.2 安装pacemaker/corosync/crmsh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum install pacemaker corosync crmsh</span><br></pre></td></tr></table></figure><p>安装后会在/usr/lib/ocf/resource.d下生成相应的ocf资源脚本，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd /usr/lib/ocf/resource.d/</span><br><span class="line">[root@node1 resource.d]# ls</span><br><span class="line">heartbeat  pacemaker  redhat</span><br></pre></td></tr></table></figure><p>通过命令查看资源脚本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 resource.d]# crm ra list ocf</span><br><span class="line">ASEHAagent.sh        AoEtarget            AudibleAlarm         CTDB                 ClusterMon           Delay                Dummy</span><br><span class="line">EvmsSCC              Evmsd                Filesystem           HealthCPU            HealthSMART          ICP                  IPaddr</span><br><span class="line">IPaddr2              IPsrcaddr            IPv6addr             LVM                  LinuxSCSI            MailTo               ManageRAID</span><br><span class="line">ManageVE             Pure-FTPd            Raid1                Route                SAPDatabase          SAPInstance          SendArp</span><br><span class="line">ServeRAID            SphinxSearchDaemon   Squid                Stateful             SysInfo              SystemHealth         VIPArip</span><br><span class="line">VirtualDomain        WAS                  WAS6                 WinPopup             Xen                  Xinetd               anything</span><br><span class="line">apache               apache.sh            asterisk             clusterfs.sh         conntrackd           controld             db2</span><br><span class="line">dhcpd                drbd                 drbd.sh              eDir88               ethmonitor           exportfs             fio</span><br><span class="line">fs.sh                iSCSILogicalUnit     iSCSITarget          ids                  ip.sh                iscsi                jboss</span><br><span class="line">ldirectord           lvm.sh               lvm_by_lv.sh         lvm_by_vg.sh         lxc                  mysql                mysql-proxy</span><br><span class="line">mysql.sh             named                named.sh             netfs.sh             nfsclient.sh         nfsexport.sh         nfsserver</span><br><span class="line">nfsserver.sh         nginx                ocf-shellfuncs       openldap.sh          oracle               oracledb.sh          orainstance.sh</span><br><span class="line">oralistener.sh       oralsnr              pgsql                ping                 pingd                portblock            postfix</span><br><span class="line">postgres-8.sh        pound                proftpd              remote               rsyncd               rsyslog              samba.sh</span><br><span class="line">script.sh            scsi2reservation     service.sh           sfex                 slapd                smb.sh               svclib_nfslock</span><br><span class="line">symlink              syslog-ng            tomcat               tomcat-5.sh          tomcat-6.sh          varnish              vm.sh</span><br><span class="line">vmware               zabbixserver</span><br></pre></td></tr></table></figure><p>启动corosync：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# service corosync start</span><br><span class="line">Starting Corosync Cluster Engine (corosync):               [  OK  ]</span><br><span class="line">[root@node2 ~]# service corosync start</span><br><span class="line">Starting Corosync Cluster Engine (corosync):               [  OK  ]</span><br><span class="line">[root@node2 ~]# crm status</span><br><span class="line">Last updated: Sat Jan 18 07:00:34 2014</span><br><span class="line">Last change: Sat Jan 18 06:58:11 2014 via crmd on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">0 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br></pre></td></tr></table></figure><p>若出现以下错误可先禁止掉stonith，该错误是因为stonith未配置导致，错误如下：</p><p>crm_verify[4921]: 2014/01/10_07:34:34 ERROR: unpack_resources: Resource start-up disabled since no STONITH resources have been defined</p><p>crm_verify[4921]: 2014/01/10_07:34:34 ERROR: unpack_resources: Either configure some or disable STONITH with the stonith-enabled option</p><p>crm_verify[4921]: 2014/01/10_07:34:34 ERROR: unpack_resources: NOTE: Clusters with shared data need STONITH to ensure data integrity</p><p>禁止stonith（只在一个节点上执行即可）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm configure property stonith-enabled=false</span><br></pre></td></tr></table></figure><h2 id="3-3-安装PostgreSQL"><a href="#3-3-安装PostgreSQL" class="headerlink" title="3.3 安装PostgreSQL"></a>3.3 安装PostgreSQL</h2><p>安装目录为/opt/pgsql</p><p>{安装过程略}</p><p>为postgres用户配置环境变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[postgres@node1 ~]$ cat .bash_profile</span><br><span class="line"># .bash_profile</span><br><span class="line"></span><br><span class="line"># Get the aliases and functions</span><br><span class="line">if [ -f ~/.bashrc ]; then</span><br><span class="line"> . ~/.bashrc</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># User specific environment and startup programs</span><br><span class="line"></span><br><span class="line">export PATH=/opt/pgsql/bin:$PATH:$HOME/bin</span><br><span class="line">export PGDATA=/opt/pgsql/data</span><br><span class="line">export PGUSER=postgres</span><br><span class="line">export PGPORT=5432</span><br><span class="line">export LD_LIBRARY_PATH=/opt/pgsql/lib:$LD_LIBRARY_PATH</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="4-1-hosts设置"><a href="#4-1-hosts设置" class="headerlink" title="4.1 hosts设置"></a>4.1 hosts设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># vim /etc/hosts</span><br><span class="line">192.168.100.201 node1</span><br><span class="line">192.168.100.202 node2</span><br></pre></td></tr></table></figure><h2 id="4-2-配置corosync"><a href="#4-2-配置corosync" class="headerlink" title="4.2 配置corosync"></a>4.2 配置corosync</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# cd /etc/corosync/</span><br><span class="line">[root@node1 corosync]# ls</span><br><span class="line">corosync.conf.example  corosync.conf.example.udpu  service.d  uidgid.d</span><br><span class="line">[root@node1 corosync]# cp corosync.conf.example corosync.conf</span><br><span class="line">[root@node1 corosync]# vim corosync.conf</span><br><span class="line">compatibility: whitetank //兼容旧版本</span><br><span class="line"></span><br><span class="line">totem &#123; //节点间通信协议定义</span><br><span class="line"> version: 2</span><br><span class="line"> secauth: on //是否开启安全认证</span><br><span class="line"> threads: 0</span><br><span class="line"> interface &#123; //心跳配置</span><br><span class="line"> ringnumber: 0</span><br><span class="line"> bindnetaddr: 10.10.10.0 //绑定网络</span><br><span class="line"> mcastaddr: 226.94.1.1 //向外发送多播的地址</span><br><span class="line"> mcastport: 5405 //多播端口</span><br><span class="line"> ttl: 1</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logging &#123; //日志设置</span><br><span class="line"> fileline: off</span><br><span class="line"> to_stderr: no //是否发送错误信息到标准输出</span><br><span class="line"> to_logfile: yes //是否记录到日志文件</span><br><span class="line"> to_syslog: yes //是否记录到系统日志</span><br><span class="line"> logfile: /var/log/cluster/corosync.log //日志文件，注意/var/log/cluster目录必须存在</span><br><span class="line"> debug: off</span><br><span class="line"> timestamp: on //日志中是否标记时间</span><br><span class="line"> logger_subsys &#123;</span><br><span class="line"> subsys: AMF</span><br><span class="line"> debug: off</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">amf &#123;</span><br><span class="line"> mode: disabled</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service &#123;</span><br><span class="line">        ver: 0</span><br><span class="line">        name: pacemaker //启用pacemaker</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">aisexec &#123;</span><br><span class="line">        user:   root</span><br><span class="line">        group:  root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-生成密钥"><a href="#4-3-生成密钥" class="headerlink" title="4.3 生成密钥"></a>4.3 生成密钥</h2><p>{默认利用random生成，但如果中断的系统随机数不够用就需要较长的时间，此时可以通过urandom来替代random}</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 corosync]# mv /dev/random /dev/random.bak</span><br><span class="line">[root@node1 corosync]# ln -s /dev/urandom /dev/random</span><br><span class="line">[root@node1 corosync]# corosync-keygen</span><br><span class="line">Corosync Cluster Engine Authentication key generator.</span><br><span class="line">Gathering 1024 bits for key from /dev/random.</span><br><span class="line">Press keys on your keyboard to generate entropy.</span><br><span class="line">Writing corosync key to /etc/corosync/authkey.</span><br></pre></td></tr></table></figure><h2 id="4-4-SSH互信配置"><a href="#4-4-SSH互信配置" class="headerlink" title="4.4 SSH互信配置"></a>4.4 SSH互信配置</h2><p>node1 -&gt; node2 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# cd .ssh/</span><br><span class="line">[root@node1 .ssh]# ssh-keygen -t rsa</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa):</span><br><span class="line">Enter passphrase (empty for no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">2c:ed:1e:a6:a7<img class="github-emoji" title="cd" alt="cd" src="https://github.githubassets.com/images/icons/emoji/unicode/1f4bf.png?v8" height="20" width="20">e3:b2:7c<img class="github-emoji" title="de" alt="de" src="https://github.githubassets.com/images/icons/emoji/unicode/1f1e9-1f1ea.png?v8" height="20" width="20">aa:ff:63:28:9a:19 root@node1</span><br><span class="line">The key's randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|                 |</span><br><span class="line">|       o         |</span><br><span class="line">|      . S        |</span><br><span class="line">|       o         |</span><br><span class="line">|    E   +.       |</span><br><span class="line">|     =o*=oo      |</span><br><span class="line">|    +.*%O=o.     |</span><br><span class="line">+-----------------+</span><br><span class="line">[root@node1 .ssh]# ssh-copy-id -i id_rsa.pub node2</span><br><span class="line">The authenticity of host 'node2 (192.168.100.202)' can't be established.</span><br><span class="line">RSA key fingerprint is be:76:cd:29:af:59:76:11:6a:c7:7d:72:27:df:d1:02.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added 'node2,192.168.100.202' (RSA) to the list of known hosts.</span><br><span class="line">root@node2's password:</span><br><span class="line">Now try logging into the machine, with "ssh 'node2'", and check in:</span><br><span class="line"></span><br><span class="line">  .ssh/authorized_keys</span><br><span class="line"></span><br><span class="line">to make sure we haven't added extra keys that you weren't expecting.</span><br><span class="line">[root@node1 .ssh]# ssh node2 date</span><br><span class="line">Sat Jan 18 06:36:21 CST 2014</span><br></pre></td></tr></table></figure><p>node2 -&gt; node1 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# cd .ssh/</span><br><span class="line">[root@node2 .ssh]# ssh-keygen -t rsa</span><br><span class="line">[root@node2 .ssh]# ssh-copy-id -i id_rsa.pub node1</span><br><span class="line">[root@node2 .ssh]# ssh node1 date</span><br><span class="line">Sat Jan 18 06:37:31 CST 2014</span><br></pre></td></tr></table></figure><h2 id="4-5-同步配置"><a href="#4-5-同步配置" class="headerlink" title="4.5 同步配置"></a>4.5 同步配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 corosync]# scp authkey corosync.conf node2:/etc/corosync/</span><br><span class="line">authkey         100%  128     0.1KB/s   00:00</span><br><span class="line">corosync.conf   100% 2808     2.7KB/s   00:00</span><br></pre></td></tr></table></figure><h2 id="4-6-下载替换脚本"><a href="#4-6-下载替换脚本" class="headerlink" title="4.6 下载替换脚本"></a>4.6 下载替换脚本</h2><p>虽然安装了上述软件后会生成pgsql资源脚本，但是其版本过旧，且自带的pgsql不能实现自动切换功能，所以在安装了pacemaker/corosync之后需要从网上下载进行替换，如下：</p><p><a href="">https://github.com/ClusterLabs/resource-agents/tree/master/heartbeat</a>�</p><p>下载pgsql与ocf-shellfuncs.in</p><p>替换：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cp pgsql /usr/lib/ocf/resource.d/heartbeat/</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> cp ocf-shellfuncs.in /usr/lib/ocf/lib/heartbeat/ocf-shellfuncs</span></span><br></pre></td></tr></table></figure><p>{注意要将ocf-shellfuncs.in名称改为ocf-shellfuncs，否则pgsql可能会找不到要用的函数。新下载的函数定义文件中添加了一些新功能函数，如ocf_local_nodename等}</p><p>pgsql资源脚本特性：</p><p>●主节点失效切换</p><p>master宕掉时，RA检测到该问题并将master标记为stop，随后将slave提升为新的master。</p><p>●异步与同步切换</p><p>如果slave宕掉或者LAN中存在问题，那么当设置为同步复制时包含写操作的事务将会被终止，也就意味着服务将停止。因此，为防止服务停止RA将会动态地将同步转换为异步复制。</p><p>●初始启动时自动识别新旧数据</p><p>当两个或多个节点上的Pacemaker同时初始启动时，RA通过每个节点上最近的replay location进行比较，找出最新数据节点。这个拥有最新数据的节点将被认为是master。当然，若在一个节点上启动pacemaker或者该节点上的pacemaker是第一个被启动的，那么它也将成为master。RA依据停止前的数据状态进行裁定。</p><p>●读负载均衡</p><p>由于slave节点可以处理只读事务，因此对于读操作可以通过虚拟另一个虚拟IP来实现读操作的负载均衡。</p><h2 id="4-7-启动corosync"><a href="#4-7-启动corosync" class="headerlink" title="4.7 启动corosync"></a>4.7 启动corosync</h2><p>启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# service corosync start</span><br><span class="line">[root@node2 ~]# service corosync start</span><br></pre></td></tr></table></figure><p>检测状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm status</span><br><span class="line">Last updated: Tue Jan 21 23:55:13 2014</span><br><span class="line">Last change: Tue Jan 21 23:37:36 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">0 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br></pre></td></tr></table></figure><p>{corosync启动成功}</p><h2 id="4-8-配置流复制"><a href="#4-8-配置流复制" class="headerlink" title="4.8 配置流复制"></a>4.8 配置流复制</h2><p>在node1/node2上配置postgresql.conf/pg_hba.conf：</p><p>postgresql.conf :</p><p>listen_addresses = ‘*’</p><p>port = 5432</p><p>wal_level = hot_standby</p><p>archive_mode = on</p><p>archive_command = ‘test ! -f /opt/archivelog/%f &amp;&amp; cp %p /opt/archivelog/%f’</p><p>max_wal_senders = 4</p><p>wal_keep_segments = 50</p><p>hot_standby = on</p><p>​    pg_hba.conf :</p><p>host replication postgres 192.168.1.0/24 trust</p><p>在node2上执行基础同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[postgres@node2 data]$ pg_basebackup -h 192.168.1.1 -U postgres -D /opt/pgsql/data -P</span><br></pre></td></tr></table></figure><p>若需测试流复制是否能够成功，可在此处手工配置（corosync启动数据库时自动生成，若已经存在将会被覆盖）recovery.conf进行测试：</p><p>standby_mode = ‘on’</p><p>primary_conninfo = ‘host=192.168.1.1 port=5432 user=postgres application_name=node2 keepalives_idle=60 keepalives_interval=5 keepalives_count=5’</p><p>restore_command = ‘cp /opt/archivelog/%f %p’</p><p>recovery_target_timeline = ‘latest’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[postgres@node2 data]$ pg_ctl start</span><br><span class="line">[postgres@node1 pgsql]$ psql</span><br><span class="line">postgres=# select client_addr,sync_state from pg_stat_replication;</span><br><span class="line"> client_addr | sync_state</span><br><span class="line">-------------+------------</span><br><span class="line"> 192.168.1.2 | sync</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><p>停止数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[postgres@node2 ~]$ pg_ctl stop -m f</span><br><span class="line">[postgres@node1 ~]$ pg_ctl stop -m f</span><br></pre></td></tr></table></figure><h2 id="4-9-配置pacemaker"><a href="#4-9-配置pacemaker" class="headerlink" title="4.9 配置pacemaker"></a>4.9 配置pacemaker</h2><p>{关于pacemaker的配置可通过多种方式，如crmsh、hb_gui、pcs等，该实验使用crmsh配置}</p><p>编写crm配置脚本：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# cat pgsql.crm</span><br><span class="line">property \ //设置全局属性</span><br><span class="line">    no-quorum-policy="ignore" \ //关闭法定投票人数策略，多节点时启用</span><br><span class="line">    stonith-enabled="false" \ //禁用stonith设备检测</span><br><span class="line">    crmd-transition-delay="0s"</span><br><span class="line"></span><br><span class="line">rsc_defaults \ //资源默认属性配置</span><br><span class="line">    resource-stickiness="INFINITY" \ //资源留在所处位置的自愿程度，INFINITY为无限自愿</span><br><span class="line">    migration-threshold="1" //设置资源发生多少次故障时节点将失去管理该资源的资格</span><br><span class="line"></span><br><span class="line">ms msPostgresql pgsql \ //</span><br><span class="line">    meta \</span><br><span class="line">        master-max="1" \</span><br><span class="line">        master-node-max="1" \</span><br><span class="line">        clone-max="2" \</span><br><span class="line">        clone-node-max="1" \</span><br><span class="line">        notify="true"</span><br><span class="line"></span><br><span class="line">clone clnPingCheck pingCheck //克隆资源</span><br><span class="line">group master-group \ //定义资源组</span><br><span class="line">      vip-master \</span><br><span class="line">      vip-rep</span><br><span class="line"></span><br><span class="line">primitive vip-master ocf<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2 \ //定义vip-master资源</span><br><span class="line">    params \</span><br><span class="line">        ip="192.168.100.213" \</span><br><span class="line">        nic="eth0" \</span><br><span class="line">        cidr_netmask="24" \</span><br><span class="line">    op <span class="keyword">start</span>   <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"stop"</span> \</span><br><span class="line">    op monitor <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"10s"</span> <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op <span class="keyword">stop</span>    <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"block"</span></span><br><span class="line"></span><br><span class="line">  primitive vip-rep ocf<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2 \ //定义vip-rep资源</span><br><span class="line">    params \</span><br><span class="line">        ip=<span class="string">"192.168.1.3"</span> \</span><br><span class="line">        nic=<span class="string">"eth2"</span> \</span><br><span class="line">        cidr_netmask=<span class="string">"24"</span> \</span><br><span class="line">    meta \</span><br><span class="line">            <span class="keyword">migration</span>-threshold=<span class="string">"0"</span> \</span><br><span class="line">    op <span class="keyword">start</span>   <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op monitor <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"10s"</span> <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op <span class="keyword">stop</span>    <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"block"</span></span><br><span class="line"></span><br><span class="line">primitive vip-<span class="keyword">slave</span> ocf<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2 \ //定义vip-<span class="keyword">slave</span>资源</span><br><span class="line">    params \</span><br><span class="line">        ip=<span class="string">"192.168.100.214"</span> \</span><br><span class="line">        nic=<span class="string">"eth0"</span> \</span><br><span class="line">        cidr_netmask=<span class="string">"24"</span> \</span><br><span class="line">    meta \</span><br><span class="line">        <span class="keyword">resource</span>-stickiness=<span class="string">"1"</span> \</span><br><span class="line">    op <span class="keyword">start</span>   <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op monitor <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"10s"</span> <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op <span class="keyword">stop</span>    <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"block"</span></span><br><span class="line"></span><br><span class="line">primitive pgsql ocf<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">pgsql \ //定义pgsql资源</span><br><span class="line">    params \ //设置相关参数</span><br><span class="line">        pgctl=<span class="string">"/opt/pgsql/bin/pg_ctl"</span> \</span><br><span class="line">        psql=<span class="string">"/opt/pgsql/bin/psql"</span> \</span><br><span class="line">        pgdata=<span class="string">"/opt/pgsql/data/"</span> \</span><br><span class="line">        start_opt=<span class="string">"-p 5432"</span> \</span><br><span class="line">        rep_mode=<span class="string">"sync"</span> \</span><br><span class="line">        node_list=<span class="string">"node1 node2"</span> \</span><br><span class="line">        restore_command=<span class="string">"cp /opt/archivelog/%f %p"</span> \</span><br><span class="line">        primary_conninfo_opt=<span class="string">"keepalives_idle=60 keepalives_interval=5 keepalives_count=5"</span> \</span><br><span class="line">        master_ip=<span class="string">"192.168.1.3"</span> \</span><br><span class="line">        stop_escalate=<span class="string">"0"</span> \</span><br><span class="line">    op <span class="keyword">start</span>   <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op monitor <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"7s"</span> <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op monitor <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"2s"</span>  <span class="keyword">on</span>-fail=<span class="string">"restart"</span> <span class="keyword">role</span>=<span class="string">"Master"</span> \</span><br><span class="line">    op promote <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op demote  <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"stop"</span> \</span><br><span class="line">    op <span class="keyword">stop</span>    <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"block"</span> \</span><br><span class="line">    op notify  <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span></span><br><span class="line"></span><br><span class="line">primitive pingCheck ocf:pacemaker:ping \ //定义pingCheck资源</span><br><span class="line">    params \</span><br><span class="line">        <span class="keyword">name</span>=<span class="string">"default_ping_set"</span> \</span><br><span class="line">        host_list=<span class="string">"192.168.100.1"</span> \</span><br><span class="line">        multiplier=<span class="string">"100"</span> \</span><br><span class="line">    op <span class="keyword">start</span>   <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op monitor <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"10s"</span> <span class="keyword">on</span>-fail=<span class="string">"restart"</span> \</span><br><span class="line">    op <span class="keyword">stop</span>    <span class="keyword">timeout</span>=<span class="string">"60s"</span> <span class="built_in">interval</span>=<span class="string">"0s"</span>  <span class="keyword">on</span>-fail=<span class="string">"ignore"</span></span><br><span class="line"></span><br><span class="line">location rsc_location<span class="number">-1</span> vip-<span class="keyword">slave</span> \ //定义资源vip-<span class="keyword">slave</span>选择位置</span><br><span class="line">    rule  <span class="number">200</span>: pgsql-<span class="keyword">status</span> eq <span class="string">"HS:sync"</span> \</span><br><span class="line">    rule  <span class="number">100</span>: pgsql-<span class="keyword">status</span> eq <span class="string">"PRI"</span> \</span><br><span class="line">    rule  -inf: not_defined pgsql-<span class="keyword">status</span> \</span><br><span class="line">    rule  -inf: pgsql-<span class="keyword">status</span> ne <span class="string">"HS:sync"</span> <span class="keyword">and</span> pgsql-<span class="keyword">status</span> ne <span class="string">"PRI"</span></span><br><span class="line"></span><br><span class="line">location rsc_location<span class="number">-2</span> msPostgresql \ //定义资源msPostgresql选择位置</span><br><span class="line">    rule -inf: not_defined default_ping_set <span class="keyword">or</span> default_ping_set lt <span class="number">100</span></span><br><span class="line"></span><br><span class="line">colocation rsc_colocation<span class="number">-1</span> inf: msPostgresql        clnPingCheck //定义在相同节点上运行的资源</span><br><span class="line">colocation rsc_colocation<span class="number">-2</span> inf: <span class="keyword">master</span>-<span class="keyword">group</span>        msPostgresql:<span class="keyword">Master</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">order</span> rsc_order<span class="number">-1</span> <span class="number">0</span>: clnPingCheck          msPostgresql //定义对资源的操作顺序</span><br><span class="line"><span class="keyword">order</span> rsc_order<span class="number">-2</span> <span class="number">0</span>: msPostgresql:promote  <span class="keyword">master</span>-<span class="keyword">group</span>:<span class="keyword">start</span>   symmetrical=<span class="literal">false</span></span><br><span class="line"><span class="keyword">order</span> rsc_order<span class="number">-3</span> <span class="number">0</span>: msPostgresql:demote   <span class="keyword">master</span>-<span class="keyword">group</span>:<span class="keyword">stop</span>    symmetrical=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>注：该脚本针对网上的配置方式做了一点修改，因为网上是针对pacemaker-1.0.*进行配置的，而本实验使用的是pacemaker-1.1.10。</p><p>导入配置脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm configure load update pgsql.crm</span><br><span class="line">WARNING: pgsql: specified timeout 60s for stop is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: specified timeout 60s for start is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: specified timeout 60s for notify is smaller than the advised 90</span><br><span class="line">WARNING: pgsql: specified timeout 60s for demote is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: specified timeout 60s for promote is smaller than the advised 120</span><br></pre></td></tr></table></figure><p>一段时间后查看ha状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm status</span><br><span class="line">Last updated: Tue Jan 21 23:55:13 2014</span><br><span class="line">Last change: Tue Jan 21 23:37:36 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# crm_mon -Afr -1</span><br><span class="line">Last updated: Tue Jan 21 23:37:20 2014</span><br><span class="line">Last change: Tue Jan 21 23:37:36 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Full list of resources:</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node Attributes:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : 1000</span><br><span class="line">    + pgsql-data-status                : LATEST</span><br><span class="line">    + pgsql-master-baseline            : 0000000006000078</span><br><span class="line">    + pgsql-status                     : PRI</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : 100</span><br><span class="line">    + pgsql-data-status                : STREAMING|SYNC</span><br><span class="line">    + pgsql-status                     : HS:sync   </span><br><span class="line"></span><br><span class="line">Migration summary:</span><br><span class="line">* Node node2:</span><br><span class="line">* Node node1:</span><br></pre></td></tr></table></figure><p>注：刚启动时两节点均为slave，一段时间后node1自动切换为master。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="5-1-备节点失效"><a href="#5-1-备节点失效" class="headerlink" title="5.1 备节点失效"></a>5.1 备节点失效</h2><p>在node2上杀死postgres数据库进程，模拟备节点上数据库崩溃：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# killall -9 postgres</span><br></pre></td></tr></table></figure><p>查看此时集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_mon -Afr -1</span><br><span class="line">Last updated: Wed Jan 22 02:15:06 2014</span><br><span class="line">Last change: Wed Jan 22 02:15:33 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Full list of resources:</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Stopped: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node Attributes:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : 1000</span><br><span class="line">    + pgsql-data-status                : LATEST</span><br><span class="line">    + pgsql-master-baseline            : 0000000006000078</span><br><span class="line">    + pgsql-status                     : PRI</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : -INFINITY</span><br><span class="line">    + pgsql-data-status                : DISCONNECT</span><br><span class="line">    + pgsql-status                     : STOP      </span><br><span class="line"></span><br><span class="line">Migration summary:</span><br><span class="line">* Node node2:</span><br><span class="line">   pgsql: migration-threshold=1 fail-count=1 last-failure='Wed Jan 22 02:15:35 2014'</span><br><span class="line">* Node node1: </span><br><span class="line"></span><br><span class="line">Failed actions:</span><br><span class="line">    pgsql_monitor_7000 on node2 'not running' (7): call=42, status=complete, last-rc-change='Wed Jan 22 02:14:58 2014', queued=0ms, exec=0ms</span><br></pre></td></tr></table></figure><p>{vip-slave资源已成功切换到了node1上}</p><p>重启node2上的corosync，数据库将重新伴随启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# service corosync restart</span><br><span class="line">[root@node1 ~]# crm_mon -Afr -1</span><br><span class="line">Last updated: Wed Jan 22 02:16:24 2014</span><br><span class="line">Last change: Wed Jan 22 02:16:55 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Full list of resources:</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node Attributes:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : 1000</span><br><span class="line">    + pgsql-data-status                : LATEST</span><br><span class="line">    + pgsql-master-baseline            : 0000000006000078</span><br><span class="line">    + pgsql-status                     : PRI</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : 100</span><br><span class="line">    + pgsql-data-status                : STREAMING|SYNC</span><br><span class="line">    + pgsql-status                     : HS:sync   </span><br><span class="line"></span><br><span class="line">Migration summary:</span><br><span class="line">* Node node2:</span><br><span class="line">* Node node1:</span><br></pre></td></tr></table></figure><p>{vip-slave又重新回到了nod2上}</p><h2 id="5-2-主节点失效切换"><a href="#5-2-主节点失效切换" class="headerlink" title="5.2 主节点失效切换"></a>5.2 主节点失效切换</h2><p>在node1上杀死postgres数据库进程，模拟主节点上数据库崩溃：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# killall -9 postgres</span><br></pre></td></tr></table></figure><p>等会查看集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# crm_mon -Afr -1</span><br><span class="line">Last updated: Wed Jan 22 02:17:50 2014</span><br><span class="line">Last change: Wed Jan 22 02:18:16 2014 via crm_attribute on node2</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Full list of resources:</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node2 ]</span><br><span class="line">     Stopped: [ node1 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node Attributes:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : -INFINITY</span><br><span class="line">    + pgsql-data-status                : DISCONNECT</span><br><span class="line">    + pgsql-status                     : STOP</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql                     : 1000</span><br><span class="line">    + pgsql-data-status                : LATEST</span><br><span class="line">    + pgsql-master-baseline            : 0000000008014A70</span><br><span class="line">    + pgsql-status                     : PRI       </span><br><span class="line"></span><br><span class="line">Migration summary:</span><br><span class="line">* Node node2:</span><br><span class="line">* Node node1:</span><br><span class="line">   pgsql: migration-threshold=1 fail-count=1 last-failure='Wed Jan 22 02:18:11 2014'</span><br><span class="line"></span><br><span class="line">Failed actions:</span><br><span class="line">    pgsql_monitor_2000 on node1 'not running' (7): call=2435, status=complete, last-rc-change='Wed Jan 22 02:18:11 2014', queued=0ms, exec=0ms</span><br></pre></td></tr></table></figure><p>{vip-master/vip-rep都已成功切换到node2上，且node2已变为master，node2上pg数据库状态已切换为PRI}</p><p>停止node1上的corosync：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# service corosync stop</span><br></pre></td></tr></table></figure><p>执行一次基础同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[postgres@node1 data]$ pwd</span><br><span class="line">/opt/pgsql/data</span><br><span class="line">[postgres@node1 data]$ rm -rf *</span><br><span class="line">[postgres@node1 data]$ pg_basebackup -h 192.168.1.3 -U postgres -D /opt/pgsql/data/ -P</span><br><span class="line">19172/19172 kB (100%), 1/1 tablespace</span><br><span class="line">NOTICE:  pg_stop_backup complete, all required WAL segments have been archived</span><br><span class="line">[postgres@node1 data]$ ls</span><br><span class="line">backup_label      base    pg_clog      pg_ident.conf  pg_notify  pg_stat_tmp  pg_tblspc    PG_VERSION  postgresql.conf</span><br><span class="line">backup_label.old  global  pg_hba.conf  pg_multixact   pg_serial  pg_subtrans  pg_twophase  pg_xlog     recovery.done</span><br></pre></td></tr></table></figure><p>启动node1上的corosync：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># service corosync start</span></span><br></pre></td></tr></table></figure><h2 id="5-3-主节点恢复"><a href="#5-3-主节点恢复" class="headerlink" title="5.3 主节点恢复"></a>5.3 主节点恢复</h2><p>修复原主节点后将其恢复为当前备节点</p><p>在node1上执行一次基础同步：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[postgres@node1 data]$ pwd</span><br><span class="line">/opt/pgsql/data</span><br><span class="line">[postgres@node1 data]$ rm -rf *</span><br><span class="line">[postgres@node1 data]$ pg_basebackup -h 192.168.2.3 -U postgres -D /opt/pgsql/data/ -P</span><br><span class="line">19172/19172 kB (100%), 1/1 tablespace</span><br><span class="line">NOTICE:  pg_stop_backup complete, all required WAL segments have been archived</span><br><span class="line">[postgres@node1 data]$ ls</span><br><span class="line">backup_label      base    pg_clog      pg_ident.conf  pg_notify  pg_stat_tmp  pg_tblspc    PG_VERSION  postgresql.conf</span><br><span class="line">backup_label.old  global  pg_hba.conf  pg_multixact   pg_serial  pg_subtrans  pg_twophase  pg_xlog     recovery.done</span><br></pre></td></tr></table></figure><p>启动heartbeat之前必须删除资锁，不然资源将不会伴随heartbeat启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# rm -rf /var/lib/pgsql/tmp/PGSQL.lock</span><br></pre></td></tr></table></figure><p>{该锁文件在当节点为主节点时创建，但不会因为heartbeat的异常停止或数据库/系统的异常终止而自动删除，所以在恢复一个节点的时候只要该节点充当过主节点就需要手动清理该锁文件}</p><p>重启node1上的heartbeat：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# service heartbeat restart</span><br></pre></td></tr></table></figure><p>过段时间后查看集群状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# crm_mon -Afr1</span><br><span class="line">============</span><br><span class="line">Last updated: Mon Jan 27 08:50:43 2014</span><br><span class="line">Stack: Heartbeat</span><br><span class="line">Current DC: node2 (f2dcd1df-7429-42f5-82e9-b73921f97cab) - partition with quorum</span><br><span class="line">Version: 1.0.12-unknown</span><br><span class="line">2 Nodes configured, unknown expected votes</span><br><span class="line">4 Resources configured.</span><br><span class="line">============</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Full list of resources:</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Master/Slave Set: msPostgresql</span><br><span class="line">     Masters: [ node2 ]</span><br><span class="line">     Slaves: [ node1 ]</span><br><span class="line"> Clone Set: clnPingCheck</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node Attributes:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql:0                   : 100</span><br><span class="line">    + pgsql-data-status                : STREAMING|SYNC</span><br><span class="line">    + pgsql-status                     : HS:sync</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                 : 100</span><br><span class="line">    + master-pgsql:1                   : 1000</span><br><span class="line">    + pgsql-data-status                : LATEST</span><br><span class="line">    + pgsql-master-baseline            : 00000000120000B0</span><br><span class="line">    + pgsql-status                     : PRI       </span><br><span class="line"></span><br><span class="line">Migration summary:</span><br><span class="line">* Node node1:</span><br><span class="line">* Node node2:</span><br></pre></td></tr></table></figure><p>{vip-slave已成功切到node1上，node1成功成为流复制备节点}</p><h1 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h1><h2 id="6-1-启动关闭corosync"><a href="#6-1-启动关闭corosync" class="headerlink" title="6.1 启动关闭corosync"></a>6.1 启动关闭corosync</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# service corosync start</span><br><span class="line">[root@node1 ~]# service corosync stop</span><br></pre></td></tr></table></figure><h2 id="6-2-查看HA状态"><a href="#6-2-查看HA状态" class="headerlink" title="6.2 查看HA状态"></a>6.2 查看HA状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm status</span><br><span class="line">Last updated: Tue Jan 21 23:55:13 2014</span><br><span class="line">Last change: Tue Jan 21 23:37:36 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br></pre></td></tr></table></figure><h2 id="6-3-查看资源状态及节点属性"><a href="#6-3-查看资源状态及节点属性" class="headerlink" title="6.3 查看资源状态及节点属性"></a>6.3 查看资源状态及节点属性</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_mon -Afr -1</span><br><span class="line">Last updated: Tue Jan 21 23:37:20 2014</span><br><span class="line">Last <span class="keyword">change</span>: Tue Jan <span class="number">21</span> <span class="number">23</span>:<span class="number">37</span>:<span class="number">36</span> <span class="number">2014</span> via crm_attribute <span class="keyword">on</span> node1</span><br><span class="line">Stack: classic openais (<span class="keyword">with</span> <span class="keyword">plugin</span>)</span><br><span class="line"><span class="keyword">Current</span> DC: node1 - <span class="keyword">partition</span> <span class="keyword">with</span> quorum</span><br><span class="line"><span class="keyword">Version</span>: <span class="number">1.1</span><span class="number">.10</span><span class="number">-14.</span>el6_5<span class="number">.2</span><span class="number">-368</span>c726</span><br><span class="line"><span class="number">2</span> Nodes configured, <span class="number">2</span> expected votes</span><br><span class="line"><span class="number">7</span> Resources configured</span><br><span class="line"></span><br><span class="line"><span class="keyword">Online</span>: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Full</span> <span class="keyword">list</span> <span class="keyword">of</span> resources:</span><br><span class="line"></span><br><span class="line"> vip-<span class="keyword">slave</span> (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> <span class="keyword">Resource</span> <span class="keyword">Group</span>: <span class="keyword">master</span>-<span class="keyword">group</span></span><br><span class="line">     vip-<span class="keyword">master</span> (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> <span class="keyword">Master</span>/<span class="keyword">Slave</span> <span class="keyword">Set</span>: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> <span class="keyword">Clone</span> <span class="keyword">Set</span>: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node <span class="keyword">Attributes</span>:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                 : <span class="number">100</span></span><br><span class="line">    + <span class="keyword">master</span>-pgsql                     : <span class="number">1000</span></span><br><span class="line">    + pgsql-<span class="keyword">data</span>-<span class="keyword">status</span>                : LATEST</span><br><span class="line">    + pgsql-<span class="keyword">master</span>-baseline            : <span class="number">0000000006000078</span></span><br><span class="line">    + pgsql-<span class="keyword">status</span>                     : PRI</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                 : <span class="number">100</span></span><br><span class="line">    + <span class="keyword">master</span>-pgsql                     : <span class="number">100</span></span><br><span class="line">    + pgsql-<span class="keyword">data</span>-<span class="keyword">status</span>                : STREAMING|<span class="keyword">SYNC</span></span><br><span class="line">    + pgsql-<span class="keyword">status</span>                     : HS:<span class="keyword">sync</span>   </span><br><span class="line"></span><br><span class="line"><span class="keyword">Migration</span> summary:</span><br><span class="line">* Node node2:</span><br><span class="line">* Node node1:</span><br></pre></td></tr></table></figure><h2 id="6-4-查看配置"><a href="#6-4-查看配置" class="headerlink" title="6.4 查看配置"></a>6.4 查看配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm configure show</span><br><span class="line">node node1 \</span><br><span class="line">        attributes pgsql-data-status="LATEST"</span><br><span class="line">node node2 \</span><br><span class="line">        attributes pgsql-data-status="STREAMING|SYNC"</span><br><span class="line">primitive pgsql ocf<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">pgsql \</span><br><span class="line">        params pgctl="/opt/pgsql/bin/pg_ctl" psql="/opt/pgsql/bin/psql" pgdata="/opt/pgsql/data/" start_opt="-p 5432" rep_mode="sync" node_list="node1 node2" restore_command="cp /opt/archivelog/%f %p" primary_conninfo_opt="keepalives_idle=60 keepalives_interval=5 keepalives_count=5" master_ip="192.168.1.3" stop_escalate="0" \</span><br><span class="line">        op start timeout="60s" interval="0s" on-fail="restart" \</span><br><span class="line">        op monitor timeout="60s" interval="7s" on-fail="restart" \</span><br><span class="line">        op monitor timeout="60s" interval="2s" on-fail="restart" role="Master" \</span><br><span class="line">        op promote timeout="60s" interval="0s" on-fail="restart" \</span><br><span class="line">        op demote timeout="60s" interval="0s" on-fail="stop" \</span><br><span class="line">……</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h2 id="6-5-实时监控HA"><a href="#6-5-实时监控HA" class="headerlink" title="6.5 实时监控HA"></a>6.5 实时监控HA</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_mon -Afr</span><br><span class="line">Last updated: Wed Jan 22 00:40:12 2014</span><br><span class="line">Last change: Tue Jan 21 23:37:36 2014 via crm_attribute on node1</span><br><span class="line">Stack: classic openais (with plugin)</span><br><span class="line">Current DC: node1 - partition with quorum</span><br><span class="line">Version: 1.1.10-14.el6_5.2-368c726</span><br><span class="line">2 Nodes configured, 2 expected votes</span><br><span class="line">7 Resources configured</span><br><span class="line"></span><br><span class="line">Online: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Full list of resources:</span><br><span class="line"></span><br><span class="line">vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node2</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line">     vip-rep    (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started node1</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node Attributes:</span><br><span class="line">* Node node1:</span><br><span class="line">    + default_ping_set                  : 100</span><br><span class="line">    + master-pgsql                      : 1000</span><br><span class="line">    + pgsql-data-status                 : LATEST</span><br><span class="line">    + pgsql-master-baseline             : 0000000006000078</span><br><span class="line">    + pgsql-status                      : PRI</span><br><span class="line">* Node node2:</span><br><span class="line">    + default_ping_set                  : 100</span><br><span class="line">    + master-pgsql                      : 100</span><br><span class="line">    + pgsql-data-status                 : STREAMING|SYNC</span><br><span class="line">    + pgsql-status                      : HS:sync   </span><br><span class="line"></span><br><span class="line">Migration summary:* Node node2: * Node node1:</span><br></pre></td></tr></table></figure><h2 id="6-6-crm-resource命令"><a href="#6-6-crm-resource命令" class="headerlink" title="6.6 crm_resource命令"></a>6.6 crm_resource命令</h2><h3 id="资源启动-关闭："><a href="#资源启动-关闭：" class="headerlink" title="资源启动/关闭："></a>资源启动/关闭：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_resource -r vip-master -v started</span><br><span class="line">[root@node1 ~]# crm_resource -r vip-master -v stoped</span><br></pre></td></tr></table></figure><h3 id="列举资源："><a href="#列举资源：" class="headerlink" title="列举资源："></a>列举资源：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_resource -L</span><br><span class="line"> vip-slave (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started</span><br><span class="line"> Resource Group: master-group</span><br><span class="line">     vip-master (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Started</span><br><span class="line"> Master/Slave Set: msPostgresql [pgsql]</span><br><span class="line">     Masters: [ node1 ]</span><br><span class="line">     Slaves: [ node2 ]</span><br><span class="line"> Clone Set: clnPingCheck [pingCheck]</span><br><span class="line">     Started: [ node1 node2 ]</span><br></pre></td></tr></table></figure><h3 id="查看资源位置："><a href="#查看资源位置：" class="headerlink" title="查看资源位置："></a>查看资源位置：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_resource -W -r pgsql</span><br><span class="line">resource pgsql is running on: node2</span><br></pre></td></tr></table></figure><h3 id="迁移资源："><a href="#迁移资源：" class="headerlink" title="迁移资源："></a>迁移资源：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_resource -M -r vip-slave -N node2</span><br></pre></td></tr></table></figure><h3 id="删除资源："><a href="#删除资源：" class="headerlink" title="删除资源："></a>删除资源：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_resource -D -r vip-slave -t primitive</span><br></pre></td></tr></table></figure><h2 id="6-7-crm命令"><a href="#6-7-crm命令" class="headerlink" title="6.7 crm命令"></a>6.7 crm命令</h2><h3 id="列举指定的RA："><a href="#列举指定的RA：" class="headerlink" title="列举指定的RA："></a>列举指定的RA：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm ra list ocf pacemaker</span><br><span class="line">ClusterMon     Dummy          HealthCPU      HealthSMART    Stateful       SysInfo        SystemHealth   controld       ping           pingd</span><br><span class="line">remote</span><br></pre></td></tr></table></figure><h3 id="删除节点："><a href="#删除节点：" class="headerlink" title="删除节点："></a>删除节点：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm node delete node2</span><br></pre></td></tr></table></figure><h3 id="停用节点："><a href="#停用节点：" class="headerlink" title="停用节点："></a>停用节点：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm node standby node2</span><br></pre></td></tr></table></figure><h3 id="启用节点："><a href="#启用节点：" class="headerlink" title="启用节点："></a>启用节点：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm node online node2</span><br></pre></td></tr></table></figure><h3 id="配置pacemaker："><a href="#配置pacemaker：" class="headerlink" title="配置pacemaker："></a>配置pacemaker：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm configure</span><br><span class="line"><span class="meta">crm(live)configure#</span><span class="bash"></span></span><br><span class="line">……</span><br><span class="line">……</span><br><span class="line"><span class="meta">crm(live)configure#</span><span class="bash"> commit</span></span><br><span class="line"><span class="meta">crm(live)configure#</span><span class="bash"> quit</span></span><br></pre></td></tr></table></figure><h2 id="6-8-重置failcount"><a href="#6-8-重置failcount" class="headerlink" title="6.8 重置failcount"></a>6.8 重置failcount</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm resource</span><br><span class="line"><span class="meta">crm(live)resource#</span><span class="bash"> failcount pgsql <span class="built_in">set</span> node1 0</span></span><br><span class="line"><span class="meta">crm(live)resource#</span><span class="bash"> failcount pgsql show node1</span></span><br><span class="line">scope=status  name=fail-count-pgsql value=0</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# crm resource cleanup pgsql</span><br><span class="line">Cleaning up pgsql:0 on node1</span><br><span class="line">Waiting for 1 replies from the CRMd. OK</span><br><span class="line"></span><br><span class="line">[root@node1 ~]# crm_failcount -G -U node1 -r pgsql</span><br><span class="line">scope=status  name=fail-count-pgsql value=INFINITY</span><br><span class="line">[root@node1 ~]# crm_failcount -D -U node1 -r pgsql</span><br></pre></td></tr></table></figure><h1 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h1><h2 id="7-1-Q1"><a href="#7-1-Q1" class="headerlink" title="7.1 Q1"></a>7.1 Q1</h2><p>问题现象：</p><p>corosync.log日志中报错：</p><p>Jan 15 10:23:57 node1 lrmd: [6327]: info: RA output: (pgsql:0:monitor:stderr) /usr/lib/ocf/resource.d//heartbeat/pgsql: line 1749: ocf_local_nodename: command not found</p><p>Jan 15 10:23:57 node1 crm_attribute: [11094]: info: Invoked: /usr/sbin/crm_attribute -l reboot -N -n -v 0000000006000090 pgsql-xlog-loc lrm_get_rsc_type_metadata(578)</p><p>Jan 15 10:23:57 node1 lrmd: [6327]: info: RA output: (pgsql:0:monitor:stderr) Could not map uname=-n to a UUID: The object/attribute does not exist</p><p>解决方式：</p><p>查看pgsql脚本，发现其中使用了ocf_local_nodename，该函数本该在ocf-shellfuncs.in中有定义，但却没有这个函数，上网查看相关论坛</p><p><a href="http://www.gossamer-threads.com/lists/linuxha/users/89379?do=post_view_threaded" target="_blank" rel="noopener">http://www.gossamer-threads.com/lists/linuxha/users/89379?do=post_view_threaded</a>�</p><p>指出此时需要相关补丁，解决ocf_local_nodename函数的补丁：</p><p><a href="">https://github.com/ClusterLabs/resource-agents/commit/abc1c3f6464f6e5e7a1e41cd7c9b8179896c1903</a>�</p><p>最新的版本没有ocf_local_nodename函数，所以使用以下版本：</p><p>{注：确保pacemaker版本&gt;1.1.8，不然crm_node -n命令无法使用}</p><p><a href="">https://github.com/ClusterLabs/resource-agents/blob/a6f4ddf76cb4bbc1b3df4c9b6632a6351b63c19e/heartbeat/pgsql</a>�</p><p><a href="">https://github.com/ClusterLabs/resource-agents/tree/abc1c3f6464f6e5e7a1e41cd7c9b8179896c1903/heartbeat</a>�</p><p>不含有ocf_local_nodename函数的pgsql脚本：</p><p><a href="">https://raw.github.com/ClusterLabs/resource-agents/a6f4ddf76cb4bbc1b3df4c9b6632a6351b63c19e/heartbeat/pgsql</a>�</p><h2 id="7-2-Q2"><a href="#7-2-Q2" class="headerlink" title="7.2 Q2"></a>7.2 Q2</h2><p>问题现象：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm configure load update pgsql.crm</span><br><span class="line">WARNING: pingCheck: specified timeout 60s for start is smaller than the advised 90</span><br><span class="line">WARNING: pingCheck: specified timeout 60s for stop is smaller than the advised 100</span><br><span class="line">WARNING: pgsql: specified timeout 60s for stop is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: specified timeout 60s for start is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: specified timeout 60s for notify is smaller than the advised 90</span><br><span class="line">WARNING: pgsql: specified timeout 60s for demote is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: specified timeout 60s for promote is smaller than the advised 120</span><br><span class="line">ERROR: master-group: attribute ordered does not exist</span><br><span class="line">Do you still want to commit? no</span><br></pre></td></tr></table></figure><p>解决方式：</p><p>错误提示：在定义的master-group中ordered属性不存在</p><p>（1）该问题是pacemaker版本所致，在pacemaker-1.1版本中不支持ordered,colocated属性，通过以下方法以1.0版本的cibconfig.py替换当前新版本试图解决此问题，结果失败：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# vim /usr/lib64/python2.6/site-packages/crmsh/cibconfig.py</span><br><span class="line">[root@node1 ~]# cd /usr/lib64/python2.6/site-packages/crmsh/</span><br><span class="line">[root@node1 crmsh]# mv cibconfig.py cibconfig.py.bak</span><br><span class="line">[root@node1 crmsh]# wget https://github.com/ClusterLabs/pacemaker-1.0/blob/fa1a99ab36e0ed015f1bcbbb28f7db962a9d1abc/shell/modules/cibconfig.py</span><br></pre></td></tr></table></figure><p>（2）从配置脚本中去除关于ordered的定义（成功）：</p><p>group master-group \</p><p>vip-master \</p><p>vip-rep \</p><p>meta \</p><p>ordered=”false”</p><p>改为：</p><p>group master-group \</p><p>vip-master \</p><p>vip-rep</p><h2 id="7-3-Q3"><a href="#7-3-Q3" class="headerlink" title="7.3 Q3"></a>7.3 Q3</h2><p>问题现象：</p><p>安装pacemaker时报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> yum install pacemaker*</span></span><br><span class="line">……</span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Processing Dependency: libesmtp.so.5()(64bit) <span class="keyword">for</span> package: pacemaker</span></span><br><span class="line"><span class="meta">--&gt;</span><span class="bash"> Finished Dependency Resolution</span></span><br><span class="line">pacemaker-1.0.12-1.el5.centos.i386 from clusterlabs has depsolving problems</span><br><span class="line"><span class="meta">  --&gt;</span><span class="bash"> Missing Dependency: libesmtp.so.5 is needed by package pacemaker-1.0.12-1.el5.centos.i386 (clusterlabs)</span></span><br><span class="line">pacemaker-1.0.12-1.el5.centos.x86_64 from clusterlabs has depsolving problems</span><br><span class="line"><span class="meta">  --&gt;</span><span class="bash"> Missing Dependency: libesmtp.so.5()(64bit) is needed by package pacemaker-1.0.12-1.el5.centos.x86_64 (clusterlabs)</span></span><br><span class="line">Error: Missing Dependency: libesmtp.so.5 is needed by package pacemaker-1.0.12-1.el5.centos.i386 (clusterlabs)</span><br><span class="line">Error: Missing Dependency: libesmtp.so.5()(64bit) is needed by package pacemaker-1.0.12-1.el5.centos.x86_64 (clusterlabs)</span><br><span class="line"> You could try using --skip-broken to work around the problem</span><br><span class="line"> You could try running: package-cleanup --problems</span><br><span class="line">                        package-cleanup --dupes</span><br><span class="line">                        rpm -Va --nofiles --nodigest</span><br><span class="line">The program package-cleanup is found in the yum-utils package.</span><br></pre></td></tr></table></figure><p>解决方式：</p><p>提示缺少libesmtp，安装即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> wget ftp://ftp.univie.ac.at/systems/linux/fedora/epel/5/x86_64/libesmtp-1.0.4-5.el5.x86_64.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> wget ftp://ftp.univie.ac.at/systems/linux/fedora/epel/5/i386/libesmtp-1.0.4-5.el5.i386.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -ivh libesmtp-1.0.4-5.el5.x86_64.rpm</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> rpm -ivh libesmtp-1.0.4-5.el5.i386.rpm</span></span><br></pre></td></tr></table></figure><h2 id="7-4-Q4"><a href="#7-4-Q4" class="headerlink" title="7.4 Q4"></a>7.4 Q4</h2><p>问题现象：</p><p>加载crm配置时报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm configure load update pgsql.crm</span><br><span class="line">ERROR: pgsql: parameter rep_mode does not exist</span><br><span class="line">ERROR: pgsql: parameter node_list does not exist</span><br><span class="line">ERROR: pgsql: parameter master_ip does not exist</span><br><span class="line">ERROR: pgsql: parameter restore_command does not exist</span><br><span class="line">ERROR: pgsql: parameter primary_conninfo_opt does not exist</span><br><span class="line">WARNING: pgsql: specified timeout 60s for stop is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: action monitor_Master not advertised in meta-data, it may not be supported by the RA</span><br><span class="line">WARNING: pgsql: specified timeout 60s for start is smaller than the advised 120</span><br><span class="line">WARNING: pgsql: action notify not advertised in meta-data, it may not be supported by the RA</span><br><span class="line">WARNING: pgsql: action demote not advertised in meta-data, it may not be supported by the RA</span><br><span class="line">WARNING: pgsql: action promote not advertised in meta-data, it may not be supported by the RA</span><br><span class="line">WARNING: pingCheck: specified timeout 60s for start is smaller than the advised 90</span><br><span class="line">WARNING: pingCheck: specified timeout 60s for stop is smaller than the advised 100</span><br><span class="line">Do you still want to commit? no</span><br></pre></td></tr></table></figure><p>解决方式：</p><p>参数不存在是因为pgsql脚本太旧，需要替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scp pgsql root@192.168.100.201:/usr/lib/ocf/resource.d/heartbeat/</span><br><span class="line">scp ocf-shellfuncs.in root@192.168.100.201:/usr/lib/ocf/lib/heartbeat/</span><br><span class="line"></span><br><span class="line">scp pgsql root@192.168.100.202:/usr/lib/ocf/resource.d/heartbeat/</span><br><span class="line">scp ocf-shellfuncs.in root@192.168.100.202:/usr/lib/ocf/lib/heartbeat/</span><br></pre></td></tr></table></figure><h2 id="7-5-Q5"><a href="#7-5-Q5" class="headerlink" title="7.5 Q5"></a>7.5 Q5</h2><p>问题现象：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]# crm_mon -Afr -1</span><br><span class="line">Last updated: Tue Jan 21 05:10:56 2014</span><br><span class="line">Last <span class="keyword">change</span>: Tue Jan <span class="number">21</span> <span class="number">05</span>:<span class="number">10</span>:<span class="number">08</span> <span class="number">2014</span> via cibadmin <span class="keyword">on</span> node1</span><br><span class="line">Stack: classic openais (<span class="keyword">with</span> <span class="keyword">plugin</span>)</span><br><span class="line"><span class="keyword">Current</span> DC: node1 - <span class="keyword">partition</span> <span class="keyword">with</span> quorum</span><br><span class="line"><span class="keyword">Version</span>: <span class="number">1.1</span><span class="number">.10</span><span class="number">-14.</span>el6_5<span class="number">.2</span><span class="number">-368</span>c726</span><br><span class="line"><span class="number">2</span> Nodes configured, <span class="number">2</span> expected votes</span><br><span class="line"><span class="number">7</span> Resources configured</span><br><span class="line"></span><br><span class="line"><span class="keyword">Online</span>: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Full</span> <span class="keyword">list</span> <span class="keyword">of</span> resources:</span><br><span class="line"></span><br><span class="line"> vip-<span class="keyword">slave</span> (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Stopped</span><br><span class="line"> <span class="keyword">Resource</span> <span class="keyword">Group</span>: <span class="keyword">master</span>-<span class="keyword">group</span></span><br><span class="line">     vip-<span class="keyword">master</span> (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Stopped</span><br><span class="line">     vip-rep (ocf:<img class="github-emoji" title="heartbeat" alt="heartbeat" src="https://github.githubassets.com/images/icons/emoji/unicode/1f493.png?v8" height="20" width="20">IPaddr2): Stopped</span><br><span class="line"> <span class="keyword">Master</span>/<span class="keyword">Slave</span> <span class="keyword">Set</span>: msPostgresql [pgsql]</span><br><span class="line">     Stopped: [ node1 node2 ]</span><br><span class="line"> <span class="keyword">Clone</span> <span class="keyword">Set</span>: clnPingCheck [pingCheck]</span><br><span class="line">     Stopped: [ node1 node2 ]</span><br><span class="line"></span><br><span class="line">Node <span class="keyword">Attributes</span>:</span><br><span class="line">* Node node1:</span><br><span class="line">* Node node2:</span><br><span class="line"></span><br><span class="line"><span class="keyword">Migration</span> summary:</span><br><span class="line">* Node node1:</span><br><span class="line">* Node node2: </span><br><span class="line"></span><br><span class="line"><span class="keyword">Failed</span> actions:</span><br><span class="line">    pingCheck_monitor_0 <span class="keyword">on</span> node1 <span class="string">'invalid parameter'</span> (<span class="number">2</span>): <span class="keyword">call</span>=<span class="number">23</span>, <span class="keyword">status</span>=<span class="keyword">complete</span>, <span class="keyword">last</span>-rc-<span class="keyword">change</span>=<span class="string">'Tue Jan 21 05:10:10 2014'</span>, queued=<span class="number">200</span>ms, exec=<span class="number">0</span>ms</span><br><span class="line">    pingCheck_monitor_0 <span class="keyword">on</span> node2 <span class="string">'invalid parameter'</span> (<span class="number">2</span>): <span class="keyword">call</span>=<span class="number">23</span>, <span class="keyword">status</span>=<span class="keyword">complete</span>, <span class="keyword">last</span>-rc-<span class="keyword">change</span>=<span class="string">'Tue Jan 21 05:09:36 2014'</span>, queued=<span class="number">281</span>ms, exec=<span class="number">0</span>ms</span><br></pre></td></tr></table></figure><p>解决方式：</p><p>该错误是因为脚本定义中的pingCheck调用的pingd脚本中存在未知参数，经查ocf/pacemaker/pingd中不存在multiplier参数：</p><p>primitive pingCheck ocf:pacemaker:pingd \</p><p>params \</p><p>name=”default_ping_set” \</p><p>host_list=”192.168.100.1” \</p><p>multiplier=”100” \</p><p>op start timeout=”60s” interval=”0s” on-fail=”restart” \</p><p>op monitor timeout=”60s” interval=”10s” on-fail=”restart” \</p><p>op stop timeout=”60s” interval=”0s” on-fail=”ignore”</p><p>因此将调用改为ocf💓pingd</p><h2 id="7-6-Q6"><a href="#7-6-Q6" class="headerlink" title="7.6 Q6"></a>7.6 Q6</h2><p>问题现象：</p><p>corosync日志中报错：</p><p>Jan 21 04:36:02 corosync [TOTEM ] Received message has invalid digest… ignoring.</p><p>Jan 21 04:36:02 corosync [TOTEM ] Invalid packet data</p><p>解决方式：</p><p>说明网络中存在相同的多播，更改多播地址即可。</p><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">第一次没用创建成功 删除 所有配置 --- /var/lib/pacemaker/cib</span><br><span class="line">搭建高可用单播配置：cd /etc/corosync/corosync.conf</span><br><span class="line">        interface &#123;</span><br><span class="line">                member &#123;</span><br><span class="line">                     memberaddr:192.168.67.134</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                 member &#123;</span><br><span class="line">                     memberaddr:192.168.67.135 </span><br><span class="line">                &#125;</span><br><span class="line">                ringnumber: 0</span><br><span class="line">                bindnetaddr: 192.168.67.0  （网段）</span><br><span class="line">                mcastport: 5405</span><br><span class="line">                ttl: 1</span><br><span class="line">        &#125;</span><br><span class="line"> 在推荐的网络接口配置中有几件事需要注意：</span><br><span class="line">所有心跳网络的 ringnumber 配置不能重复，最小值为 0 。</span><br><span class="line">bindnetaddr 是心跳网卡 IP 地址对应的网络地址。示例中使用了两个子网掩码为 /24 的 IPv4 网段。</span><br><span class="line">Corosync 通信使用 UDP 协议，端口为 mcastport （接收数据）和 mcastport - 1 （发送数据）。配置防火墙时需要打开这两个端口。</span><br><span class="line">pgsql.crm--------内容</span><br><span class="line">primitive pingCheck ocf:pacemaker:ping \</span><br><span class="line">   params \</span><br><span class="line">        name=&quot;default_ping_set&quot; \</span><br><span class="line">        host_list=&quot;192.168.67.1&quot; \ (使用网关地址，必须是ping通)</span><br><span class="line">        multiplier=&quot;100&quot; \</span><br><span class="line">        </span><br><span class="line">[postgres@node2 ~]$ crm_mon -Afr -1 ---（错误：权限不足，必须是root用户）</span><br><span class="line">Could not establish cib_ro connection: No such file or directory (2)</span><br><span class="line"></span><br><span class="line">Connection to cluster failed: Transport endpoint is not connected</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">VIP 192.168.67.130 必须在一个网段</span><br></pre></td></tr></table></figure><h1 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h1><p>脚本：</p><p><a href="">https://github.com/ClusterLabs/resource-agents/blob/master/heartbeat/pgsql</a>�</p><p>脚本使用说明：</p><p><a href="">https://github.com/t-matsuo/resource-agents/wiki/Resource-Agent-for-PostgreSQL-9.1-streaming-replication</a>�</p><p>crm_resouce命令：</p><p><a href="http://www.novell.com/zh-cn/documentation/sle_ha/book_sleha/data/man_crmresource.html" target="_blank" rel="noopener">http://www.novell.com/zh-cn/documentation/sle_ha/book_sleha/data/man_crmresource.html</a>�</p><p>crm_failcount命令：</p><p><a href="http://www.novell.com/zh-cn/documentation/sle_ha/book_sleha/data/man_crmfailcount.html" target="_blank" rel="noopener">http://www.novell.com/zh-cn/documentation/sle_ha/book_sleha/data/man_crmfailcount.html</a>�</p>]]></content>
      
      <categories>
          
          <category> postgres </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>postgres日常使用</title>
      <link href="/2018/05/31/postgressql/"/>
      <url>/2018/05/31/postgressql/</url>
      <content type="html"><![CDATA[<div class="note warning"><p>主要记录本人平时使用的postgres的建库，备库和日常使用的SQL语句，其中涉及一点postgres的高可用运维内容和数据库的注意事项。</p></div><a id="more"></a><h5 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">test</span> <span class="keyword">WITH</span> OWNER = postgres <span class="keyword">ENCODING</span> = <span class="string">'UTF8'</span>;</span><br></pre></td></tr></table></figure><h5 id="查看表的索引："><a href="#查看表的索引：" class="headerlink" title="查看表的索引："></a>查看表的索引：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_indexes <span class="keyword">where</span> tablename=<span class="string">'log'</span>;</span><br></pre></td></tr></table></figure><h5 id="导出备份数据库："><a href="#导出备份数据库：" class="headerlink" title="导出备份数据库："></a>导出备份数据库：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -h localhost -U postgres databasename &gt; /tmp/databasename.bak.yyyymmdd.sql</span><br></pre></td></tr></table></figure><h5 id="导入恢复数据库-sql文件是pg-dump导出的文件就行，可以是整个数据库，也可以只是单个表，也可以只是结构等"><a href="#导入恢复数据库-sql文件是pg-dump导出的文件就行，可以是整个数据库，也可以只是单个表，也可以只是结构等" class="headerlink" title="导入恢复数据库(sql文件是pg_dump导出的文件就行，可以是整个数据库，也可以只是单个表，也可以只是结构等)"></a>导入恢复数据库(sql文件是pg_dump导出的文件就行，可以是整个数据库，也可以只是单个表，也可以只是结构等)</h5><figure class="highlight"><figcaption><span>lite</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h localhost -U postgres -d databasename &lt; /tmp/databasename.bak.yyyymmdd.sql</span><br></pre></td></tr></table></figure><h5 id="导出数据结构，主要是加上参数-s："><a href="#导出数据结构，主要是加上参数-s：" class="headerlink" title="导出数据结构，主要是加上参数-s："></a>导出数据结构，主要是加上参数-s：</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -U username -W dbname -f /tmp/filename.sql</span><br></pre></td></tr></table></figure><h5 id="导出某个表："><a href="#导出某个表：" class="headerlink" title="导出某个表："></a>导出某个表：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -h localhost -U postgres -t tablename dbname &gt; test.sql</span><br></pre></td></tr></table></figure><h5 id="导出某个表的结构，同样是加参数”-s”："><a href="#导出某个表的结构，同样是加参数”-s”：" class="headerlink" title="导出某个表的结构，同样是加参数”-s”："></a>导出某个表的结构，同样是加参数”-s”：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -h localhost -U postgres -t tablename -s dbname &gt; test_construct.sql</span><br></pre></td></tr></table></figure><h5 id="导出某个表的数据，加参数”-a”："><a href="#导出某个表的数据，加参数”-a”：" class="headerlink" title="导出某个表的数据，加参数”-a”："></a>导出某个表的数据，加参数”-a”：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump -h localhost -U postgres -t tablename -a dbname &gt; test_data.sql</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">查看序列：<span class="keyword">select</span> * <span class="keyword">from</span> information_schema.sequences <span class="keyword">where</span> sequence_schema = <span class="string">'public'</span>;</span><br><span class="line">查看数据库大小：<span class="keyword">select</span> pg_size_pretty(pg_database_size(<span class="string">'test'</span>));</span><br><span class="line">查看表的大小：<span class="keyword">select</span> pg_size_pretty(pg_relation_size(<span class="string">'test'</span>));</span><br></pre></td></tr></table></figure><h5 id="由于-copy-命令始终是到数据库服务端找文件，当以文件形式导入导出数据时需以超级用户执行，权限要求很高，适合数据库管理员操作-而-copy-命令可在客户端执行导入客户端的数据文件，权限要求没那么高，适合开发人员，测试人员使用，因为生产库的权限掌握在-DBA-手中。"><a href="#由于-copy-命令始终是到数据库服务端找文件，当以文件形式导入导出数据时需以超级用户执行，权限要求很高，适合数据库管理员操作-而-copy-命令可在客户端执行导入客户端的数据文件，权限要求没那么高，适合开发人员，测试人员使用，因为生产库的权限掌握在-DBA-手中。" class="headerlink" title="由于 copy 命令始终是到数据库服务端找文件，当以文件形式导入导出数据时需以超级用户执行，权限要求很高，适合数据库管理员操作;而 \copy 命令可在客户端执行导入客户端的数据文件，权限要求没那么高，适合开发人员，测试人员使用，因为生产库的权限掌握在 DBA 手中。"></a>由于 copy 命令始终是到数据库服务端找文件，当以文件形式导入导出数据时需以超级用户执行，权限要求很高，适合数据库管理员操作;而 \copy 命令可在客户端执行导入客户端的数据文件，权限要求没那么高，适合开发人员，测试人员使用，因为生产库的权限掌握在 DBA 手中。</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copy (<span class="keyword">select</span> * <span class="keyword">from</span> tablename) <span class="keyword">to</span> <span class="string">'/tmp/1.txt'</span> (<span class="keyword">format</span> csv,delimiter <span class="string">'|'</span>);</span><br><span class="line">\copy (<span class="keyword">select</span> * <span class="keyword">from</span> tablename) <span class="keyword">to</span> <span class="string">'/tmp/1.txt'</span> <span class="keyword">with</span> delimiter <span class="string">'|'</span>;</span><br><span class="line"></span><br><span class="line">psql -c "\copy (<span class="keyword">select</span> * <span class="keyword">from</span> PBX_CASH_RCV_REG <span class="keyword">where</span> TRAN_DATE=<span class="string">'20170913'</span>) <span class="keyword">to</span> <span class="string">'PBX_CASH_RCV_REG.txt'</span> <span class="keyword">with</span> delimiter <span class="string">'|'</span> <span class="literal">NULL</span> <span class="string">' '</span><span class="string">"</span></span><br></pre></td></tr></table></figure><h5 id="清除所有表"><a href="#清除所有表" class="headerlink" title="清除所有表"></a>清除所有表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> aaa() <span class="keyword">RETURNS</span> <span class="built_in">void</span> <span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    tmp <span class="built_in">VARCHAR</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">names</span> <span class="keyword">CURSOR</span> <span class="keyword">FOR</span> </span><br><span class="line">    <span class="keyword">select</span> tablename <span class="keyword">from</span> pg_tables <span class="keyword">where</span> schemaname=<span class="string">'public'</span> ;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">  <span class="keyword">FOR</span> stmt <span class="keyword">IN</span> <span class="keyword">names</span> <span class="keyword">LOOP</span></span><br><span class="line">    tmp := <span class="string">'DROP TABLE '</span>|| quote_ident(stmt.tablename) || <span class="string">' CASCADE;'</span>;</span><br><span class="line">RAISE NOTICE 'notice: %', tmp;</span><br><span class="line">    <span class="keyword">EXECUTE</span> <span class="string">'DROP TABLE '</span>|| quote_ident(stmt.tablename) || <span class="string">' CASCADE;'</span>;</span><br><span class="line">  <span class="keyword">END</span> <span class="keyword">LOOP</span>;</span><br><span class="line">  RAISE NOTICE 'finished .....';</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line">调用时用：</span><br><span class="line"><span class="keyword">select</span> aaa();</span><br></pre></td></tr></table></figure><h5 id="获取系统表中字段信息"><a href="#获取系统表中字段信息" class="headerlink" title="获取系统表中字段信息"></a>获取系统表中字段信息</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.attnum,a.attname <span class="keyword">AS</span> <span class="keyword">field</span>,t.typname <span class="keyword">AS</span> <span class="keyword">type</span>,a.attlen <span class="keyword">AS</span> <span class="keyword">length</span>,a.atttypmod <span class="keyword">AS</span> lengthvar,a.attnotnull <span class="keyword">AS</span> notnull <span class="keyword">FROM</span> pg_class c,pg_attribute a,pg_type t</span><br><span class="line"><span class="keyword">WHERE</span> c.relname = <span class="string">'dbmanager_hostlist'</span> <span class="keyword">and</span> a.attnum &gt; <span class="number">0</span> <span class="keyword">and</span> a.attrelid = c.oid <span class="keyword">and</span> a.atttypid = t.oid <span class="keyword">ORDER</span> <span class="keyword">BY</span> a.attnum;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\dtS   <span class="comment">--- 查看系统表</span></span><br><span class="line">\dtS+  <span class="comment">---  查看详细信息</span></span><br><span class="line"><span class="keyword">comment</span> <span class="keyword">on</span> <span class="keyword">table</span> t <span class="keyword">IS</span> <span class="string">'this is a test'</span>; <span class="comment">--- 添加表注释</span></span><br><span class="line">\<span class="keyword">set</span> AUTOCOMMIT <span class="keyword">off</span> <span class="comment">--- 关闭自动更新</span></span><br></pre></td></tr></table></figure><h5 id="指定去重的列排序"><a href="#指定去重的列排序" class="headerlink" title="指定去重的列排序"></a>指定去重的列排序</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> <span class="keyword">on</span> (subject) <span class="keyword">id</span>,<span class="keyword">name</span>,subject,score <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">order</span> <span class="keyword">by</span> subject,score <span class="keyword">desc</span>;</span><br><span class="line">扫描10行</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">limit</span> <span class="number">1</span> <span class="keyword">offset</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h5 id="创建序列"><a href="#创建序列" class="headerlink" title="创建序列"></a>创建序列</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">sequence</span> seq</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">nextval</span>(<span class="string">'seq'</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">nextval</span>(<span class="string">'seq'</span>) <span class="keyword">from</span> window_test;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">function</span> <span class="keyword">nextval</span>(regclass) volatile; <span class="comment">-- 只执行一遍 </span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">function</span> <span class="keyword">nextval</span>(regclass) stable; </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> generate_series(<span class="number">1</span>,<span class="number">30</span>) <span class="keyword">as</span> g(i) <span class="keyword">where</span> i = <span class="keyword">nextval</span>(<span class="string">'seq'</span>::regclass);</span><br></pre></td></tr></table></figure><h5 id="锁表问题"><a href="#锁表问题" class="headerlink" title="锁表问题"></a>锁表问题</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询是否锁表了                                       </span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">oid</span> <span class="keyword">from</span> pg_class <span class="keyword">where</span> relname=<span class="string">'可能锁表了的表'</span></span><br><span class="line"><span class="keyword">select</span> pid <span class="keyword">from</span> pg_locks <span class="keyword">where</span> relation=<span class="string">'上面查出的oid'</span></span><br><span class="line"><span class="comment">--如果查询到了结果，表示该表被锁 则需要释放锁定        </span></span><br><span class="line"><span class="keyword">select</span> pg_cancel_backend(上面查到的pid)</span><br></pre></td></tr></table></figure><h5 id="增删改查的操作"><a href="#增删改查的操作" class="headerlink" title="增删改查的操作"></a>增删改查的操作</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 修改字段名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ubb_model <span class="keyword">rename</span> <span class="keyword">column</span> hostname <span class="keyword">to</span> hostgroup;</span><br><span class="line"><span class="comment">--- 删除唯一约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> ubb_services <span class="keyword">drop</span> <span class="keyword">constraint</span> ubb_services_services_key;</span><br><span class="line"><span class="comment">--- 增加一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> column_name datatype;                   </span><br><span class="line"><span class="comment">--- 删除一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">DROP</span>  column_name;                           </span><br><span class="line"><span class="comment">--- 更改列的数据类型</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ALTER</span>  column_name <span class="keyword">TYPE</span> datatype;              </span><br><span class="line"><span class="comment">--- 表的重命名</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">RENAME</span> <span class="keyword">TO</span> new_name;                           </span><br><span class="line"><span class="comment">--- 更改列的名字</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">RENAME</span> column_name <span class="keyword">to</span> new_column_name;          </span><br><span class="line"><span class="comment">--- 字段的not null设置</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ALTER</span> column_name &#123;<span class="keyword">SET</span>|<span class="keyword">DROP</span>&#125; <span class="keyword">NOT</span> <span class="literal">NULL</span>;          </span><br><span class="line"><span class="comment">--- 给列添加default</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ALTER</span> column_name <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> expression;</span><br><span class="line"><span class="comment">--- 添加主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> primary <span class="keyword">key</span>(<span class="keyword">sid</span>);</span><br><span class="line"><span class="comment">--- 添加外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> orders <span class="keyword">add</span> foreign <span class="keyword">key</span>(goods_id) <span class="keyword">references</span> goods(<span class="keyword">sid</span>)  <span class="keyword">on</span> <span class="keyword">update</span> <span class="keyword">cascade</span> <span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>;</span><br><span class="line">on <span class="keyword">update</span> <span class="keyword">cascade</span>: <span class="comment">--- 被引用行更新时，引用行自动更新； </span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">update</span> restrict: <span class="comment">--- 被引用的行禁止更新；</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> <span class="keyword">cascade</span>: <span class="comment">--- 被引用行删除时，引用行也一起删除；</span></span><br><span class="line"><span class="keyword">on</span> <span class="keyword">delete</span> restrict: <span class="comment">--- 被引用的行禁止删除；</span></span><br><span class="line"><span class="comment">--- 删除外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> orders <span class="keyword">drop</span> <span class="keyword">constraint</span> orders_goods_id_fkey;</span><br><span class="line"><span class="comment">--- 添加唯一约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">add</span> <span class="keyword">constraint</span> unique_goods_sid <span class="keyword">unique</span>(<span class="keyword">sid</span>);</span><br><span class="line"><span class="comment">--- 删除默认值</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods  <span class="keyword">alter</span> <span class="keyword">column</span> <span class="keyword">sid</span> <span class="keyword">drop</span> <span class="keyword">default</span>;</span><br><span class="line"><span class="comment">---  修改字段的数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">alter</span> <span class="keyword">column</span> <span class="keyword">sid</span> <span class="keyword">type</span> <span class="built_in">character</span> <span class="built_in">varying</span>;</span><br><span class="line"><span class="comment">--- 重命名字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> goods <span class="keyword">rename</span> <span class="keyword">column</span> <span class="keyword">sid</span> <span class="keyword">to</span> ssid;</span><br></pre></td></tr></table></figure><h5 id="时间的使用方法"><a href="#时间的使用方法" class="headerlink" title="时间的使用方法:"></a>时间的使用方法:</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  to_char(<span class="keyword">CURRENT_DATE</span>,<span class="string">'YYYYMMDD'</span>);</span><br><span class="line"><span class="keyword">select</span>  to_char(<span class="keyword">CURRENT_TIMESTAMP</span>,<span class="string">'YYYYMMDD'</span>);</span><br><span class="line"><span class="keyword">select</span>  to_char(<span class="keyword">CURRENT_TIMESTAMP</span>,<span class="string">'YYYYMMDDMSUS'</span>);</span><br><span class="line"><span class="keyword">select</span>  to_char(<span class="keyword">CURRENT_TIMESTAMP</span>,<span class="string">'HH24MISS'</span>);</span><br><span class="line"><span class="comment">--- 时间的计算</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CURRENT_DATE</span>  + <span class="built_in">integer</span> <span class="string">'7'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CURRENT_TIME</span>  + <span class="built_in">interval</span> <span class="string">'1 hour'</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">CURRENT_TIME</span>  + <span class="keyword">time</span> <span class="string">'03:00'</span>;</span><br></pre></td></tr></table></figure><h5 id="如何找到postgreSQL数据库中占空间最大的表？"><a href="#如何找到postgreSQL数据库中占空间最大的表？" class="headerlink" title="如何找到postgreSQL数据库中占空间最大的表？"></a>如何找到postgreSQL数据库中占空间最大的表？</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">SELECT</span> relname,relpages <span class="keyword">FROM</span> pg_class <span class="keyword">ORDER</span> <span class="keyword">BY</span> relpages <span class="keyword">DESC</span>;</span><br><span class="line">如果你只想要最大的那个表，可以用limit参数来限制结果的数量，就像这样：</span><br><span class="line"><span class="keyword">SELECT</span> relname, relpages <span class="keyword">FROM</span> pg_class <span class="keyword">ORDER</span> <span class="keyword">BY</span> relpages <span class="keyword">DESC</span> <span class="keyword">limit</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">1.relname - 关系名/表名</span><br><span class="line">2.relpages - 关系页数（默认情况下一个页大小是8kb）</span><br><span class="line">3.pg_class - 系统表, 维护着所有relations的详细信息</span><br><span class="line">4.limit 1 - 限制返回结果只显示一行</span><br></pre></td></tr></table></figure><h5 id="如何计算postgreSQL数据库所占用的硬盘大小？"><a href="#如何计算postgreSQL数据库所占用的硬盘大小？" class="headerlink" title="如何计算postgreSQL数据库所占用的硬盘大小？"></a>如何计算postgreSQL数据库所占用的硬盘大小？</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pg_database_size 这个方法是专门用来查询数据库大小的，它返回的结果单位是字节（bytes）。:</span><br><span class="line"><span class="keyword">SELECT</span> pg_database_size(<span class="string">'geekdb'</span>);</span><br><span class="line">如果你想要让结果更直观一点，那就使用pg_size_pretty方法，它可以把字节数转换成更友好易读的格式。</span><br><span class="line"><span class="keyword">SELECT</span> pg_size_pretty(pg_database_size(<span class="string">'geekdb'</span>));</span><br></pre></td></tr></table></figure><h5 id="如何计算postgreSQL表所占用的硬盘大小？"><a href="#如何计算postgreSQL表所占用的硬盘大小？" class="headerlink" title="如何计算postgreSQL表所占用的硬盘大小？"></a>如何计算postgreSQL表所占用的硬盘大小？</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下面这个命令查出来的表大小是包含索引和toasted data的，如果你对除去索引外仅仅是表占的大小感兴趣，可以 使用后面提供的那个命令。</span><br><span class="line"><span class="keyword">SELECT</span> pg_size_pretty(pg_total_relation_size(<span class="string">'big_table'</span>));</span><br></pre></td></tr></table></figure><h5 id="类别一、-如果两张张表（导出表和目标表）的字段一致，并且希望插入全部数据，可以用这种方法："><a href="#类别一、-如果两张张表（导出表和目标表）的字段一致，并且希望插入全部数据，可以用这种方法：" class="headerlink" title="类别一、 如果两张张表（导出表和目标表）的字段一致，并且希望插入全部数据，可以用这种方法："></a>类别一、 如果两张张表（导出表和目标表）的字段一致，并且希望插入全部数据，可以用这种方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO  目标表  SELECT  * FROM  来源表 ;</span><br></pre></td></tr></table></figure><h5 id="要将-articles-表插入到-newArticles-表中，则可以通过如下SQL语句实现："><a href="#要将-articles-表插入到-newArticles-表中，则可以通过如下SQL语句实现：" class="headerlink" title="要将 articles 表插入到 newArticles 表中，则可以通过如下SQL语句实现："></a>要将 articles 表插入到 newArticles 表中，则可以通过如下SQL语句实现：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO  newArticles  SELECT  * FROM  articles ;</span><br></pre></td></tr></table></figure><h5 id="如果只希望导入指定字段，可以用这种方法："><a href="#如果只希望导入指定字段，可以用这种方法：" class="headerlink" title="如果只希望导入指定字段，可以用这种方法："></a>如果只希望导入指定字段，可以用这种方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO  目标表 (字段1, 字段2, ...)  SELECT   字段1, 字段2, ...   FROM  来源表 ;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> TPersonnelChange(  </span><br><span class="line">    UserId,  </span><br><span class="line">    DepId,  </span><br><span class="line">    SubDepId,  </span><br><span class="line">    PostionType,  </span><br><span class="line">    AuthorityId,  </span><br><span class="line">    ChangeDateS,  </span><br><span class="line">    InsertDate,  </span><br><span class="line">    UpdateDate,  </span><br><span class="line">    SakuseiSyaId  </span><br><span class="line">)<span class="keyword">SELECT</span>  </span><br><span class="line">    UserId,  </span><br><span class="line">    DepId,  </span><br><span class="line">    SubDepId,  </span><br><span class="line">    PostionType,  </span><br><span class="line">    AuthorityId,  </span><br><span class="line">    <span class="keyword">DATE_FORMAT</span>(EmployDate, <span class="string">'%Y%m%d'</span>),  </span><br><span class="line">    <span class="keyword">NOW</span>(),  </span><br><span class="line">    <span class="keyword">NOW</span>(),  </span><br><span class="line">    <span class="number">1</span>  </span><br><span class="line"><span class="keyword">FROM</span>  </span><br><span class="line">    TUserMst  </span><br><span class="line"><span class="keyword">WHERE</span>  </span><br><span class="line">    <span class="string">`Status`</span> = <span class="number">0</span>  </span><br><span class="line"><span class="keyword">AND</span> QuitFlg = <span class="number">0</span>  </span><br><span class="line"><span class="keyword">AND</span> UserId &gt; <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="generate-series函数应用"><a href="#generate-series函数应用" class="headerlink" title="generate_series函数应用"></a><a href="http://www.cnblogs.com/mchina/archive/2013/04/03/2997722.html" target="_blank" rel="noopener">generate_series函数应用</a></h5><h5 id="批量添加数据"><a href="#批量添加数据" class="headerlink" title="批量添加数据"></a>批量添加数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> generate_series(<span class="number">1</span>, <span class="number">10</span>); <span class="comment">--- int</span></span><br><span class="line"><span class="keyword">select</span> generate_series(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>); <span class="comment">--- 如果step 是正数，而start 大于stop，那么返回零行。相反，如果step 是负数，start 小于stop，则返回零行。如果是NULL 输入，也产生零行。step 为零则是一个错误。</span></span><br><span class="line"><span class="keyword">select</span> generate_series(<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">select</span> generate_series(<span class="keyword">now</span>(), <span class="keyword">now</span>() + <span class="string">'7 days'</span>, <span class="string">'1 day'</span>);</span><br><span class="line"><span class="keyword">select</span> generate_series(<span class="keyword">to_date</span>(<span class="string">'20130403'</span>,<span class="string">'yyyymmdd'</span>), <span class="keyword">to_date</span>(<span class="string">'20130404'</span>,<span class="string">'yyyymmdd'</span>), <span class="string">'3 hours'</span>);</span><br></pre></td></tr></table></figure><h4 id="锁的问题"><a href="#锁的问题" class="headerlink" title="锁的问题"></a>锁的问题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.如何锁一个表的某一行</span><br><span class="line">select * from table rowlock where id =1</span><br></pre></td></tr></table></figure><h4 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> localdatetime,retcode,respinfo <span class="keyword">from</span>  ol_transdetail <span class="keyword">where</span> localdatetime&gt; <span class="string">'20180109100000'</span> <span class="keyword">and</span> receprodcode=<span class="string">'612020'</span> <span class="keyword">and</span> retcode=<span class="string">'09209999'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> ol_transdetail <span class="keyword">where</span>  localdatetime&gt;<span class="string">'20180109163000'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">SUBSTR</span>(localdatetime,<span class="number">9</span>,<span class="number">4</span>),logip,retcode,<span class="keyword">count</span>(*),<span class="keyword">round</span>(<span class="keyword">avg</span>(protime),<span class="number">2</span>) <span class="keyword">as</span> 渠道耗时,<span class="keyword">round</span>(<span class="keyword">avg</span>(backtime),<span class="number">2</span>) <span class="keyword">as</span> 后台耗时 <span class="keyword">from</span> ol_transdetail <span class="keyword">where</span> localdate =<span class="string">'20180329'</span>  <span class="keyword">and</span> localdatetime &gt; <span class="string">'20180329170300'</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(localdatetime,<span class="number">9</span>,<span class="number">4</span>),logip,retcode <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(localdatetime,<span class="number">9</span>,<span class="number">4</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">select</span> <span class="keyword">DISTINCT</span>(logip) <span class="keyword">from</span> ol_transdetail  ;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">select</span> logip,retcode,<span class="keyword">count</span>(*),<span class="keyword">round</span>(<span class="keyword">avg</span>(protime),<span class="number">2</span>) <span class="keyword">as</span> 渠道耗时,<span class="keyword">round</span>(<span class="keyword">avg</span>(backtime),<span class="number">2</span>) <span class="keyword">as</span> 后台耗时  <span class="keyword">from</span> ol_transdetail <span class="keyword">where</span> localdatetime &gt;= to_char(<span class="keyword">now</span>() - <span class="built_in">interval</span> <span class="string">'1 min'</span>,<span class="string">'YYYYMMDDHHMMSS'</span>) <span class="keyword">group</span> <span class="keyword">by</span>  logip ,retcode;</span><br></pre></td></tr></table></figure><h4 id="每分钟查询结果"><a href="#每分钟查询结果" class="headerlink" title="每分钟查询结果"></a>每分钟查询结果</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">SUBSTR</span>(localdatetime,<span class="number">9</span>,<span class="number">4</span>),logip,retcode,<span class="keyword">count</span>(*),<span class="keyword">round</span>(<span class="keyword">avg</span>(protime),<span class="number">2</span>) <span class="keyword">as</span> 渠道耗时,<span class="keyword">round</span>(<span class="keyword">avg</span>(backtime),<span class="number">2</span>) <span class="keyword">as</span> 后台耗时 <span class="keyword">from</span> ol_transdetail <span class="keyword">where</span>  localdatetime &gt; to_char(<span class="keyword">now</span>() - <span class="built_in">interval</span> <span class="string">'1 min'</span>,<span class="string">'YYYYMMDDHHMISS'</span>) <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(localdatetime,<span class="number">9</span>,<span class="number">4</span>),logip,retcode <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">SUBSTR</span>(localdatetime,<span class="number">9</span>,<span class="number">4</span>),渠道耗时 <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h3 id="创建基础备份"><a href="#创建基础备份" class="headerlink" title="创建基础备份"></a>创建基础备份</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi pg_hba.conf</span><br><span class="line">host all all  192.168.67.35/24             md5</span><br><span class="line">host replication postgres 192.168.67.35/24 trust</span><br><span class="line">pg_basebackup -h node1 -U replication -D /data/postgresql/data/ -X stream -P</span><br><span class="line">查看主备关系</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> pg_stat_replication ;</span><br></pre></td></tr></table></figure><h3 id="用pg-rewind命令同步新备库"><a href="#用pg-rewind命令同步新备库" class="headerlink" title="用pg_rewind命令同步新备库"></a>用pg_rewind命令同步新备库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pg_rewind --target-pgdata $PGDATA --source-server=&apos;host=192.168.1.203 port=5432 user=postgres dbname=postgres&apos; -P</span><br><span class="line">mv recovery.done recovery.conf</span><br><span class="line">vi recovery.conf</span><br></pre></td></tr></table></figure><h3 id="高可用（pcs-corosync-postgres）修复旧Master"><a href="#高可用（pcs-corosync-postgres）修复旧Master" class="headerlink" title="高可用（pcs+corosync+postgres）修复旧Master"></a>高可用（pcs+corosync+postgres）修复旧Master</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">检查集群状态   </span><br><span class="line">由于设置了migration-threshold=&quot;3&quot;，发生一次普通的错误，Pacemaker会在原地重新启动postgres进程，不发生主从切换。</span><br><span class="line">（如果Master的物理机或网络发生故障，直接进行failover。）</span><br></pre></td></tr></table></figure><p>第一种方法：可通过<code>pg_basebackup</code>修复旧Master（需要强行恢复的情况下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># su - postgres</span><br><span class="line">$ rm -rf /data/postgresql/data</span><br><span class="line">$ pg_basebackup -h 192.168.41.136 -U postgres -D /data/postgresql/data -X stream -P</span><br><span class="line">$ exit</span><br><span class="line"># pcs resource cleanup msPostgresql</span><br></pre></td></tr></table></figure><p>第二种方法：通过<code>pg_baseback</code>修复旧Master。<code>cls_rebuild_slave</code>是对<code>pg_basebackup</code>的包装，主要多了执行结果状态的检查。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 pha4pgsql]# rm -rf /data/postgresql/data</span><br><span class="line">[root@node1 pha4pgsql]# cls_rebuild_slave </span><br><span class="line">22636/22636 kB (100%), 1/1 tablespace</span><br><span class="line">All resources/stonith devices successfully cleaned up</span><br><span class="line">wait for recovery complete</span><br><span class="line">.....</span><br><span class="line">slave recovery of node1 successed</span><br><span class="line">[root@node1 pha4pgsql]# cls_status</span><br><span class="line">Last updated: Fri Apr 22 02:40:48 2016</span><br><span class="line">Last change: Fri Apr 22 02:40:36 2016 by root via crm_resource on node1</span><br><span class="line">Stack: corosync</span><br><span class="line">Current DC: node2 (2) - partition with quorum</span><br><span class="line">Version: 1.1.12-a14efad</span><br><span class="line">2 Nodes configured</span><br><span class="line">4 Resources configured</span><br></pre></td></tr></table></figure><p>第三种方法: 9.5以上版本还可以通过<code>pg_rewind</code>修复旧Master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 pha4pgsql]# cls_repair_by_pg_rewind </span><br><span class="line">connected to server</span><br><span class="line">servers diverged at WAL position 0/7000410 on timeline 2</span><br><span class="line">rewinding from last common checkpoint at 0/7000368 on timeline 2</span><br><span class="line">reading source file list</span><br><span class="line">reading target file list</span><br><span class="line">reading WAL in target</span><br><span class="line">need to copy 67 MB (total source directory size is 85 MB)</span><br><span class="line">69591/69591 kB (100%) copied</span><br><span class="line">creating backup label and updating control file</span><br><span class="line">syncing target data directory</span><br><span class="line">Done!</span><br><span class="line">All resources/stonith devices successfully cleaned up</span><br><span class="line">wait for recovery complete</span><br><span class="line">....</span><br><span class="line">slave recovery of node1 successed</span><br></pre></td></tr></table></figure><h3 id="高可用（pcs-corosync-postgres）Slave上进程故障"><a href="#高可用（pcs-corosync-postgres）Slave上进程故障" class="headerlink" title="高可用（pcs+corosync+postgres）Slave上进程故障"></a>高可用（pcs+corosync+postgres）Slave上进程故障</h3><p>再强制杀死Master上的postgres进程2次后检查集群状态。</p><p>fail-count增加到3后，Pacemaker不再启动PostgreSQL，保持其为停止状态。</p><p>同时，Master(node1)(VIP所在的主机)上的复制模式被自动切换到异步复制，防止写操作hang住。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 pha4pgsql]# tail /var/lib/pgsql/tmp/rep_mode.conf</span><br><span class="line">synchronous_standby_names = ''</span><br></pre></td></tr></table></figure><h4 id="修复Salve"><a href="#修复Salve" class="headerlink" title="修复Salve"></a>修复Salve</h4><p>在node2上执行<code>cls_cleanup</code>，清除fail-count后，Pacemaker会再次启动PostgreSQL进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node2 ~]# cls_cleanup </span><br><span class="line">All resources/stonith devices successfully cleaned up</span><br><span class="line">[root@node2 ~]# cls_status </span><br><span class="line">Last updated: Sun May  8 01:43:13 2016</span><br><span class="line">Last change: Sun May  8 01:43:08 2016 by root via crm_resource on node1</span><br><span class="line">Stack: corosync</span><br><span class="line">Current DC: node2 (2) - partition with quorum</span><br><span class="line">Version: 1.1.12-a14efad</span><br><span class="line">2 Nodes configured</span><br><span class="line">4 Resources configured</span><br></pre></td></tr></table></figure><p>同时，Master(node1)上的复制模式又自动切换回到同步复制。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 pha4pgsql]# tail /var/lib/pgsql/tmp/rep_mode.conf</span><br><span class="line">synchronous_standby_names = &apos;node2&apos;(只会有同步流复制)</span><br></pre></td></tr></table></figure><h2 id="错误排查"><a href="#错误排查" class="headerlink" title="错误排查"></a>错误排查</h2><p>出现故障时，可通过以下方法排除故障</p><ol><li><p>确认集群服务是否OK</p><p>pcs status</p></li><li><p>查看错误日志</p><p>PostgreSQL的错误日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/log/messages</span><br><span class="line">/var/log/cluster/corosync.log</span><br></pre></td></tr></table></figure><p>Pacemaker输出的日志非常多，可以进行过滤。</p><p>只看Pacemaker的资源调度（在Current DC节点上执行)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep Initiating /var/log/messages</span><br></pre></td></tr></table></figure><p>只查看expgsql RA的输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep expgsql /var/log/messages</span><br></pre></td></tr></table></figure></li></ol><h2 id="其它故障的处理"><a href="#其它故障的处理" class="headerlink" title="其它故障的处理"></a>其它故障的处理</h2><h3 id="无Master时的修复"><a href="#无Master时的修复" class="headerlink" title="无Master时的修复"></a>无Master时的修复</h3><p>如果切换失败或其它原因导致集群中没有Master，可以参考下面的步骤修复</p><h4 id="方法1：使用cleanup修复"><a href="#方法1：使用cleanup修复" class="headerlink" title="方法1：使用cleanup修复"></a>方法1：使用cleanup修复</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls_cleanup</span><br></pre></td></tr></table></figure><p>大部分情况，cleanup就可以找到Master。而且应该首先使用cleanup。如果不成功，再采用下面的方法</p><h4 id="方法2：人工修复复制关系"><a href="#方法2：人工修复复制关系" class="headerlink" title="方法2：人工修复复制关系"></a>方法2：人工修复复制关系</h4><ol><li><p>将资源脱离集群管理</p><p>cls_unmanage</p></li><li><p>人工修复PostgreSQL，建立复制关系<br>至于master的选取，可以选择<code>pgsql_REPL_INFO</code>中的master节点，或根据xlog位置确定。</p></li><li><p>在所有节点上停止PostgreSQL</p></li><li><p>清除状态并恢复集群管理</p><p>cls_manage</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls_reset_master</span><br></pre></td></tr></table></figure></li></ol><h4 id="方法3：快速恢复Master节点再恢复Slave"><a href="#方法3：快速恢复Master节点再恢复Slave" class="headerlink" title="方法3：快速恢复Master节点再恢复Slave"></a>方法3：快速恢复Master节点再恢复Slave</h4><p>可以明确指定将哪个节点作为Master，省略则通过xlog位置比较确定master</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cls_reset_master [master]</span><br></pre></td></tr></table></figure><h3 id="疑难的Pacemaker问题的处理"><a href="#疑难的Pacemaker问题的处理" class="headerlink" title="疑难的Pacemaker问题的处理"></a>疑难的Pacemaker问题的处理</h3><p>有时候可能会遇到一些顽固的问题，Pacemaker不按期望的动作，或某个资源处于错误状态却无法清除。<br>这时最简单的办法就是清除CIB重新设置。可执行下面的命令完成。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./setup.sh [master]</span><br></pre></td></tr></table></figure><p>如果不指定master，并且PostgreSQL进程是活动的，通过当前PostgreSQL进程的主备关系决定谁是master。<br>如果当前没有处于主的PostgreSQL进程，通过比较xlog位置确定谁作为master。</p><p>在PostgreSQL服务启动期间，正常情况下，执行setup.sh不会使服务停止。</p><p>setup.sh还可以完全取代前面的<code>cls_reset_master</code>。</p><h3 id="fail-count的清除"><a href="#fail-count的清除" class="headerlink" title="fail-count的清除"></a>fail-count的清除</h3><p>如果某个节点上有资源的fail-count不为0，最好将其清除，即使当前资源是健康的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cls_cleanup</span><br><span class="line">ps resource cleanup msPostgresql</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>./setup.sh会清除CIB，对Pacemaker资源定义的修改应该写到config.pcs里，防止下次执行setup.sh丢失。</li><li>有些包装后的脚本容易超时，比如<code>cls_rebuild_slave</code>。此时可能执行还没有完成的，需要通过<code>cls_status</code>或日志进行确认。</li></ol><h3 id="pg-log-和pg-xlog-和pg-clog的区别"><a href="#pg-log-和pg-xlog-和pg-clog的区别" class="headerlink" title="pg_log 和pg_xlog 和pg_clog的区别"></a>pg_log 和pg_xlog 和pg_clog的区别</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">pg_xlog</span></span><br><span class="line">这个日志是记录的Postgresql的WAL信息，也就是一些事务日志信息(transaction log)，默认单个大小是16M，源码安装的时候可以更改其大小。这些信息通常名字是类似'000000010000000000000013'这样的文件，这些日志会在定时回滚恢复(PITR)，流复制(Replication Stream)以及归档时能被用到，这些日志是非常重要的，记录着数据库发生的各种事务信息，不得随意删除或者移动这类日志文件，不然你的数据库会有无法恢复的风险</span><br><span class="line"></span><br><span class="line">当你的归档或者流复制发生异常的时候，事务日志会不断地生成，有可能会造成你的磁盘空间被塞满，最终导致DB挂掉或者起不来。遇到这种情况不用慌，可以先关闭归档或者流复制功能，备份pg_xlog日志到其他地方，但请不要删除。然后删除较早时间的的pg_xlog，有一定空间后再试着启动Postgres。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pg_clog</span></span><br><span class="line">pg_clog这个文件也是事务日志文件，但与pg_xlog不同的是它记录的是事务的元数据(metadata)，这个日志告诉我们哪些事务完成了，哪些没有完成。这个日志文件一般非常小，但是重要性也是相当高，不得随意删除或者对其更改信息。</span><br><span class="line"></span><br><span class="line">总结：</span><br><span class="line"><span class="meta">#</span><span class="bash">pg_log记录各种Error信息，以及服务器与DB的状态信息，可由用户随意更新删除</span></span><br><span class="line"><span class="meta">#</span><span class="bash">pg_xlog与pg_clog记录数据库的事务信息，不得随意删除更新，做物理备份时要记得备份着两个日志。</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> postgres </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgres </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ansible常用命令</title>
      <link href="/2018/05/27/ansible-command/"/>
      <url>/2018/05/27/ansible-command/</url>
      <content type="html"><![CDATA[<div class="note primary"><p>本文主要介绍ansible的主机组配置，简单阐述ansible常用模块的使用方法，设计到的模块有ping，shell，command，script，file，fetch等内容。</p></div><a id="more"></a><h2 id="1-ansible主机清单的配置"><a href="#1-ansible主机清单的配置" class="headerlink" title="1. ansible主机清单的配置"></a>1. ansible主机清单的配置</h2><p><strong>vim /etc/ansible/hosts</strong></p><p><strong>定义方式：</strong></p><p>直接指明主机地址或主机名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">blue.example.com</span><br><span class="line">192.168.100.1</span><br></pre></td></tr></table></figure></p><p>定义一个主机组<code>[组名]</code>把地址或主机名加进去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">alpha.example.org</span><br><span class="line">beta.example.org</span><br><span class="line">192.168.1.100</span><br><span class="line"></span><br><span class="line">#组成员可以使用通配符来匹配，如下</span><br><span class="line">www[001:006].example.com  #表示从www001-www006主机</span><br></pre></td></tr></table></figure><p>  嵌套</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[webservers]</span><br><span class="line">192.168.3.49 ansible_ssh_user=chdb ansible_ssh_pass=HF*cb303</span><br><span class="line">[dbservers]</span><br><span class="line">192.168.3.62</span><br><span class="line">[wolf:children]</span><br><span class="line">webservers</span><br><span class="line">dbservers</span><br></pre></td></tr></table></figure><ul><li>如果你没有使用公钥，想要使用密码，你也可以这样写（适用于第一次登陆控制）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">格式：【主机名】 【主机地址】 【主机密码】  默认是root用户来进行的</span><br><span class="line">[keepalived]</span><br><span class="line">keepalived1  ansible_ssh_host=192.168.146.136  ansible_ssh_user=chdb ansible_ssh_pass=&quot;test&quot;</span><br><span class="line">keepalived2  ansible_ssh_host=192.168.146.137 ansible_ssh_pass=&quot;test&quot;</span><br></pre></td></tr></table></figure><h2 id="2-ansible的使用ansible-doc"><a href="#2-ansible的使用ansible-doc" class="headerlink" title="2. ansible的使用ansible-doc"></a>2. ansible的使用<code>ansible-doc</code></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一般用法:</span><br><span class="line">ansible-doc -l 获取模块信息</span><br><span class="line">ansible-doc -s MOD_NAME 获取指定模块的使用帮助</span><br></pre></td></tr></table></figure><h2 id="3-ansible使用-“命令管理方式”"><a href="#3-ansible使用-“命令管理方式”" class="headerlink" title="3. ansible使用  “命令管理方式”"></a>3. ansible使用  “命令管理方式”</h2><p>=================================<br><strong>ping：探测目标主机是否存活；</strong></p><p>ping模块主要是无意义的测试模块，主要用来检查ansible是否可以用的模块以及python是否配置好的，在playbook中基本不会使用，在能成功连接之后，总是返回结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@ansibleserver ~]# ansible all -m ping</span><br><span class="line">SSH password:</span><br><span class="line">ansiblemoniter | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: false,</span><br><span class="line">    &quot;ping&quot;: &quot;pong&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>=================================</p><p><strong>command：在远程主机执行命令；不支持|管道命令</strong></p><p>=================================</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible storm_cluster(用户组) -m command -a &quot;ls –al /tmp/resolv.conf&quot;</span><br></pre></td></tr></table></figure><p><strong>ansible 批量创建用户</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible chmap   -m shell -a &quot;useradd -m chdb -d /app/chdb&quot;</span><br><span class="line">修改密码:</span><br><span class="line">ansible chmap   -m shell -a &quot;echo &apos;chmap&apos;  |passwd  chmap   --stdin&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">相关选项如下：</span><br><span class="line">creates：一个文件名，当该文件存在，则该命令不执行</span><br><span class="line">free_form：要执行的linux指令</span><br><span class="line">chdir：在执行指令之前，先切换到该目录</span><br><span class="line">removes：一个文件名，当该文件不存在，则该选项不执行</span><br><span class="line">executable：切换shell来执行指令，该执行路径必须是一个绝对路径</span><br></pre></td></tr></table></figure><p><strong>shell：在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等 ；</strong></p><p>注意：command和shell模块的核心参数直接为命令本身；而其它模块的参数通常为“key=value”格式；</p><p><strong>ansible 批量创建用户</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ansible chmap   -m shell -a &quot;useradd -m chdb -d /app/chdb&quot;</span><br><span class="line">修改密码:</span><br><span class="line">ansible chmap   -m shell -a &quot;echo &apos;chmap&apos;  |passwd  chmap   --stdin&quot;</span><br></pre></td></tr></table></figure><p><strong>shell：在远程主机上调用shell解释器运行命令，支持shell的各种功能，例如管道等 ；</strong></p><p>================================</p><p><strong>copy：复制文件到远程主机，可以改权限等</strong></p><p>================================</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line">(1) 复制文件</span><br><span class="line">    -a "src=  dest=  "</span><br><span class="line">(2) 给定内容生成文件</span><br><span class="line">    -a "content=  dest=  "</span><br><span class="line"> 例如:</span><br><span class="line"> ansible all -m copy -a "src=/etc/fstab dest=/tmp/asnbiblecopy mode=640 backup=yes" </span><br><span class="line">  ansible all -m copy -a "content='hello\nworld' dest=/tmp/asnbiblecopy mode=640 backup=yes"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> 相关选项如下：</span><br><span class="line">backup：在覆盖之前，将源文件备份，备份文件包含时间信息。有两个选项：yes|no</span><br><span class="line">content：用于替代“src”，可以直接设定指定文件的值</span><br><span class="line">dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录</span><br><span class="line">directory_mode：递归设定目录的权限，默认为系统默认权限</span><br><span class="line">force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</span><br><span class="line">others：所有的file模块里的选项都可以在这里使用</span><br><span class="line">src：被复制到远程主机的本地文件，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用“/”来结尾，则只复制目录里的内容，如果没有使用“/”来结尾，则包含目录在内的整个内容全部复制，类似于rsync。</span><br></pre></td></tr></table></figure><p>===============================<br><strong>file ：设置文件属性。</strong></p><p><strong>设置文件属性</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m file -a &quot;path=/root/123 owner=kel group=kel mode=0644&quot;</span><br></pre></td></tr></table></figure><p>文件路径为path，表示文件路径，设定所属用户和所属用户组，权限为0644</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m file -a &quot;path=/tmp/kel/ owner=kel group=kel mode=0644 recurse=yes&quot;</span><br></pre></td></tr></table></figure><p>文件路径为path，使用文件夹进行递归修改权限，使用的参数为recurse表示为递归</p><p><strong>创建目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m file -a &quot;path=/tmp/kel state=directory mode=0755&quot;</span><br></pre></td></tr></table></figure><p>创建目录，使用的参数主要是state为directory</p><p><strong>修改权限</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m file -a &quot;path=/tmp/kel mode=0444&quot;</span><br></pre></td></tr></table></figure><p>直接使用mode来进行修改权限</p><p><strong>创建软连接</strong>     </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m file -a &quot;src=/tmp/1 dest=/tmp/2 owner=kel state=link&quot;</span><br></pre></td></tr></table></figure><p>==============================<br><strong>fetch：</strong> 从远程某一个主机获取文件到本地</p><p>文件拉取模块主要是将远程主机中的文件拷贝到本机中，和copy模块的作用刚刚相反，并且在保存的时候使用hostname来进行保存，当文件不存在的时候，会出现错误，除非设置了选项fail_on_missing为yes</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m fetch -a "src=/root/123 dest=/root"</span><br><span class="line">192.168.1.60 | success &gt;&gt; &#123;</span><br><span class="line">    "changed": true,</span><br><span class="line">    "dest": "/root/192.168.1.60/root/123",</span><br><span class="line">    "md5sum": "31be5a34915d52fe0a433d9278e99cac",</span><br><span class="line">    "remote_md5sum": "31be5a34915d52fe0a433d9278e99cac"</span><br><span class="line">&#125;</span><br><span class="line">src表示为远程主机上需要传送的文件路径，dest表示为本机上的路径，在传送过来的文件，是按照IP地址进行分类，然后路径是源文件的路径</span><br><span class="line"><span class="meta">#</span>在拉取文件的时候，必须拉取的是文件，不能拉取文件夹</span><br></pre></td></tr></table></figure><p>==============================</p><p>==============================</p><p>hostname: 修改主机名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[root@ansibleserver ~]# ansible pythonserver -m hostname -a &quot;name=python&quot;</span><br><span class="line">SSH password:</span><br><span class="line">192.168.1.60 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;name&quot;: &quot;python&quot;</span><br><span class="line">&#125;</span><br><span class="line">在查看的时候，主要查看文件/etc/sysconfig/network，重启之后才能生效</span><br></pre></td></tr></table></figure><p>==============================</p><p>=============================</p><p><strong>cron: 管理cron计划任务</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">- a &quot;&quot;: 设置管理节点生成定时任务</span><br><span class="line">action: cron</span><br><span class="line">backup=    # 如果设置，创建一个crontab备份</span><br><span class="line">cron_file=          #如果指定, 使用这个文件cron.d，而不是单个用户crontab</span><br><span class="line">day=       # 日应该运行的工作( 1-31, *, */2, etc )</span><br><span class="line">hour=      # 小时 ( 0-23, *, */2, etc )</span><br><span class="line">job=       #指明运行的命令是什么</span><br><span class="line">minute=    #分钟( 0-59, *, */2, etc )</span><br><span class="line">month=     # 月( 1-12, *, */2, etc )</span><br><span class="line">name=     #定时任务描述</span><br><span class="line">reboot    # 任务在重启时运行，不建议使用，建议使用special_time</span><br><span class="line">special_time       # 特殊的时间范围，参数：reboot（重启时）,annually（每年）,monthly（每月）,weekly（每周）,daily（每天）,hourly（每小时）</span><br><span class="line"></span><br><span class="line">state        #指定状态，prsent表示添加定时任务，也是默认设置，absent表示删除定时任务</span><br><span class="line"></span><br><span class="line">user         # 以哪个用户的身份执行</span><br><span class="line">weekday      # 周 ( 0-6 for Sunday-Saturday, *, etc )</span><br><span class="line"></span><br><span class="line">新增一个任务，每五分钟执行一次，任务名称为check</span><br><span class="line">ansible pythonserver -m cron -a &quot;name=check minute=5 job=&apos;crontab -l &gt;&gt;/root/123&apos;&quot;</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">删除定时任务</span><br><span class="line">ansible pythonserver -m cron -a &quot;name=check state=absent&quot;</span><br><span class="line">SSH password:</span><br><span class="line">192.168.1.60 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;jobs&quot;: []</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">新建一个cron文件</span><br><span class="line">ansible pythonserver -m cron -a &quot;name=&apos;for test&apos; weekday=&apos;2&apos; minute=&apos;0&apos; hour=12 user=&apos;root&apos; job=&apos;cat /etc/passwd &gt;/root/111&apos; cron_file=&apos;test ansible&apos;&quot;</span><br><span class="line">新增一个任务，在目录/etc/cron.d/目录中，文件名称为test ansible，用户为root</span><br><span class="line">-------------------------------------------------------------</span><br><span class="line">删除一个cron文件</span><br><span class="line">ansible pythonserver -m cron -a &quot;name=&apos;for test&apos; cron_file=&apos;test ansible&apos; state=absent&quot;</span><br><span class="line">SSH password:</span><br><span class="line">192.168.1.60 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;changed&quot;: true,</span><br><span class="line">    &quot;cron_file&quot;: &quot;test ansible&quot;,</span><br><span class="line">    &quot;jobs&quot;: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==============================</p><p><strong>收集fact并且进行保存</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible pythonserver -m setup --tree /tmp/facts</span><br></pre></td></tr></table></figure><p>执行之后，会显示相关的fact，并且在/tmp/facts中会保存fact信息，如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ansibleserver tmp]# ls -l /tmp/facts/</span><br><span class="line">total 12-rw-r--r-- 1 root root 8990 Jan 18 13:16 192.168.1.60</span><br></pre></td></tr></table></figure><p>使用–tree选项，在分类的时候，会根据主机的名称进行分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">收集内存信息并输出</span><br><span class="line">ansible 20.200.21.22 -m setup  -a &quot;filter=ansible*mb&quot; -u chmap</span><br><span class="line">SSH password:</span><br><span class="line">192.168.1.60 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_memfree_mb&quot;: 746,</span><br><span class="line">        &quot;ansible_memtotal_mb&quot;: 996,</span><br><span class="line">        &quot;ansible_swapfree_mb&quot;: 2015,</span><br><span class="line">        &quot;ansible_swaptotal_mb&quot;: 2015</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">收集主机网卡信息</span><br><span class="line">[root@ansibleserver tmp]# ansible pythonserver -m setup -a &quot;filter=ansible_eth[02]&quot;</span><br><span class="line">SSH password:</span><br><span class="line">192.168.1.60 | success &gt;&gt; &#123;</span><br><span class="line">    &quot;ansible_facts&quot;: &#123;</span><br><span class="line">        &quot;ansible_eth0&quot;: &#123;</span><br><span class="line">            &quot;active&quot;: true,</span><br><span class="line">            &quot;device&quot;: &quot;eth0&quot;,</span><br><span class="line">            &quot;ipv4&quot;: &#123;</span><br><span class="line">                &quot;address&quot;: &quot;192.168.1.60&quot;,</span><br><span class="line">                &quot;netmask&quot;: &quot;255.255.255.0&quot;,</span><br><span class="line">                &quot;network&quot;: &quot;192.168.1.0&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;ipv6&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;address&quot;: &quot;fe80::a00:27ff:fee5:e8a8&quot;,</span><br><span class="line">                    &quot;prefix&quot;: &quot;64&quot;,</span><br><span class="line">                    &quot;scope&quot;: &quot;link&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;macaddress&quot;: &quot;08:00:27:e5:e8:a8&quot;,</span><br><span class="line">            &quot;module&quot;: &quot;e1000&quot;,</span><br><span class="line">            &quot;mtu&quot;: 1500,</span><br><span class="line">            &quot;promisc&quot;: false,</span><br><span class="line">            &quot;type&quot;: &quot;ether&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;changed&quot;: false</span><br><span class="line">&#125;</span><br><span class="line">收集可用的facts,收集每个节点的相关信息：架构信息，IP,时间，域名，网卡，MAC，主机名，CPU等信息。</span><br><span class="line">这些收集的信息，可以作为变量。</span><br></pre></td></tr></table></figure><p><strong>在远程主机执行本地脚本：script</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible erp -m script -a &apos;/tmp/a.sh&apos;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ansible </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/05/27/hello-world/"/>
      <url>/2018/05/27/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">ls -lart</span><br><span class="line">find . -name  <span class="string">"*c"</span>|xargs grep int</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
